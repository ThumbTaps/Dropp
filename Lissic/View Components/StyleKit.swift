//
//  StyleKit.swift
//  Lissic
//
//  Created by Jeffery Jackson, Jr. on 2/23/17.
//  Copyright Â© 2017 arcyn1c. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let lightTintColor: UIColor = UIColor(red: 0.949, green: 0.216, blue: 0.259, alpha: 1.000)
        static let lightIconGlyphColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.900)
        static let lightCloudColor: UIColor = UIColor(red: 0.867, green: 0.867, blue: 0.867, alpha: 0.600)
        static let darkBackgroundColor: UIColor = UIColor(red: 0.086, green: 0.086, blue: 0.086, alpha: 1.000)
        static let lightBackgroundColor: UIColor = UIColor(red: 0.980, green: 0.980, blue: 0.980, alpha: 1.000)
        static let darkTintColor: UIColor = UIColor(red: 0.446, green: 0.646, blue: 0.742, alpha: 1.000)
        static let darkIconGlyphColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.500)
        static let darkCloudColor: UIColor = UIColor(red: 0.600, green: 0.600, blue: 0.600, alpha: 0.750)
        static let lightStrokeColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.120)
        static let darkStrokeColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.100)
        static let darkBackdropOverlayColor: UIColor = StyleKit.darkBackgroundColor.withAlpha(0.8)
        static let lightBackdropOverlayColor: UIColor = StyleKit.lightBackgroundColor.withAlpha(0.75)
        static let lightPrimaryTextColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)
        static let lightSecondaryTextColor: UIColor = StyleKit.lightPrimaryTextColor.withAlpha(0.5)
        static let lightTertiaryTextColor: UIColor = StyleKit.lightPrimaryTextColor.withAlpha(0.25)
        static let darkPrimaryTextColor: UIColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        static let darkSecondaryTextColor: UIColor = StyleKit.darkPrimaryTextColor.withAlpha(0.5)
        static let darkTertiaryTextColor: UIColor = StyleKit.darkPrimaryTextColor.withAlpha(0.25)
        static var imageOfLightPlaceholderReleaseArtwork: UIImage?
        static var lightPlaceholderReleaseArtworkTargets: [AnyObject]?
        static var imageOfDarkPlaceholderReleaseArtwork: UIImage?
        static var darkPlaceholderReleaseArtworkTargets: [AnyObject]?
        static var imageOfLightPlaceholderArtistArtwork: UIImage?
        static var lightPlaceholderArtistArtworkTargets: [AnyObject]?
        static var imageOfDarkPlaceholderArtistArtwork: UIImage?
        static var darkPlaceholderArtistArtworkTargets: [AnyObject]?
    }

    //// Colors

    public dynamic class var lightTintColor: UIColor { return Cache.lightTintColor }
    public dynamic class var lightIconGlyphColor: UIColor { return Cache.lightIconGlyphColor }
    public dynamic class var lightCloudColor: UIColor { return Cache.lightCloudColor }
    public dynamic class var darkBackgroundColor: UIColor { return Cache.darkBackgroundColor }
    public dynamic class var lightBackgroundColor: UIColor { return Cache.lightBackgroundColor }
    public dynamic class var darkTintColor: UIColor { return Cache.darkTintColor }
    public dynamic class var darkIconGlyphColor: UIColor { return Cache.darkIconGlyphColor }
    public dynamic class var darkCloudColor: UIColor { return Cache.darkCloudColor }
    public dynamic class var lightStrokeColor: UIColor { return Cache.lightStrokeColor }
    public dynamic class var darkStrokeColor: UIColor { return Cache.darkStrokeColor }
    public dynamic class var darkBackdropOverlayColor: UIColor { return Cache.darkBackdropOverlayColor }
    public dynamic class var lightBackdropOverlayColor: UIColor { return Cache.lightBackdropOverlayColor }
    public dynamic class var lightPrimaryTextColor: UIColor { return Cache.lightPrimaryTextColor }
    public dynamic class var lightSecondaryTextColor: UIColor { return Cache.lightSecondaryTextColor }
    public dynamic class var lightTertiaryTextColor: UIColor { return Cache.lightTertiaryTextColor }
    public dynamic class var darkPrimaryTextColor: UIColor { return Cache.darkPrimaryTextColor }
    public dynamic class var darkSecondaryTextColor: UIColor { return Cache.darkSecondaryTextColor }
    public dynamic class var darkTertiaryTextColor: UIColor { return Cache.darkTertiaryTextColor }

    //// Drawing Methods

    public dynamic class func drawSearchIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// magnifying glass Drawing
        context.saveGState()
        context.translateBy(x: 150, y: 150)

        let magnifyingGlassPath = UIBezierPath()
        magnifyingGlassPath.move(to: CGPoint(x: -13.78, y: -51.75))
        magnifyingGlassPath.addCurve(to: CGPoint(x: -27.52, y: -49.19), controlPoint1: CGPoint(x: -18.62, y: -51.75), controlPoint2: CGPoint(x: -23.26, y: -50.84))
        magnifyingGlassPath.addCurve(to: CGPoint(x: -51.75, y: -13.78), controlPoint1: CGPoint(x: -41.7, y: -43.68), controlPoint2: CGPoint(x: -51.75, y: -29.91))
        magnifyingGlassPath.addCurve(to: CGPoint(x: -13.78, y: 24.19), controlPoint1: CGPoint(x: -51.75, y: 7.19), controlPoint2: CGPoint(x: -34.75, y: 24.19))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 24.19, y: -13.78), controlPoint1: CGPoint(x: 7.19, y: 24.19), controlPoint2: CGPoint(x: 24.19, y: 7.19))
        magnifyingGlassPath.addCurve(to: CGPoint(x: -13.78, y: -51.75), controlPoint1: CGPoint(x: 24.19, y: -34.75), controlPoint2: CGPoint(x: 7.19, y: -51.75))
        magnifyingGlassPath.close()
        magnifyingGlassPath.move(to: CGPoint(x: 21.48, y: -48.51))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 26.12, y: 16.12), controlPoint1: CGPoint(x: 39.09, y: -30.9), controlPoint2: CGPoint(x: 40.64, y: -3.26))
        magnifyingGlassPath.addLine(to: CGPoint(x: 61.76, y: 51.76))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 61.76, y: 57.76), controlPoint1: CGPoint(x: 63.41, y: 53.42), controlPoint2: CGPoint(x: 63.41, y: 56.1))
        magnifyingGlassPath.addLine(to: CGPoint(x: 57.76, y: 61.76))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 51.76, y: 61.76), controlPoint1: CGPoint(x: 56.1, y: 63.41), controlPoint2: CGPoint(x: 53.42, y: 63.41))
        magnifyingGlassPath.addLine(to: CGPoint(x: 16.12, y: 26.12))
        magnifyingGlassPath.addCurve(to: CGPoint(x: -48.51, y: 21.48), controlPoint1: CGPoint(x: -3.26, y: 40.64), controlPoint2: CGPoint(x: -30.9, y: 39.09))
        magnifyingGlassPath.addCurve(to: CGPoint(x: -49.12, y: -47.9), controlPoint1: CGPoint(x: -67.62, y: 2.37), controlPoint2: CGPoint(x: -67.83, y: -28.54))
        magnifyingGlassPath.addLine(to: CGPoint(x: -48.51, y: -48.51))
        magnifyingGlassPath.addCurve(to: CGPoint(x: 21.48, y: -48.51), controlPoint1: CGPoint(x: -29.2, y: -67.83), controlPoint2: CGPoint(x: 2.16, y: -67.83))
        magnifyingGlassPath.close()
        iconColor.setFill()
        magnifyingGlassPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawLeftIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 120, height: 300), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 120, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 120, y: resizedFrame.height / 300)


        //// chevron Drawing
        context.saveGState()
        context.translateBy(x: 90.92, y: 150.57)
        context.rotate(by: 45 * CGFloat.pi/180)

        let chevronPath = UIBezierPath()
        chevronPath.move(to: CGPoint(x: -41.53, y: -56.57))
        chevronPath.addCurve(to: CGPoint(x: -39.31, y: -56.38), controlPoint1: CGPoint(x: -40.5, y: -56.57), controlPoint2: CGPoint(x: -39.88, y: -56.57))
        chevronPath.addCurve(to: CGPoint(x: -37.62, y: -54.78), controlPoint1: CGPoint(x: -38.47, y: -56.09), controlPoint2: CGPoint(x: -37.89, y: -55.51))
        chevronPath.addCurve(to: CGPoint(x: -37.41, y: -52.24), controlPoint1: CGPoint(x: -37.41, y: -54.11), controlPoint2: CGPoint(x: -37.41, y: -53.49))
        chevronPath.addCurve(to: CGPoint(x: -37.41, y: 37.17), controlPoint1: CGPoint(x: -37.41, y: -52.24), controlPoint2: CGPoint(x: -37.41, y: 13.78))
        chevronPath.addLine(to: CGPoint(x: 52.57, y: 37.17))
        chevronPath.addCurve(to: CGPoint(x: 55.02, y: 37.36), controlPoint1: CGPoint(x: 53.82, y: 37.17), controlPoint2: CGPoint(x: 54.45, y: 37.17))
        chevronPath.addCurve(to: CGPoint(x: 56.71, y: 38.96), controlPoint1: CGPoint(x: 55.86, y: 37.65), controlPoint2: CGPoint(x: 56.44, y: 38.23))
        chevronPath.addCurve(to: CGPoint(x: 56.92, y: 41.5), controlPoint1: CGPoint(x: 56.92, y: 39.63), controlPoint2: CGPoint(x: 56.92, y: 40.25))
        chevronPath.addLine(to: CGPoint(x: 56.92, y: 52.24))
        chevronPath.addCurve(to: CGPoint(x: 56.74, y: 54.67), controlPoint1: CGPoint(x: 56.92, y: 53.49), controlPoint2: CGPoint(x: 56.92, y: 54.11))
        chevronPath.addCurve(to: CGPoint(x: 55.12, y: 56.36), controlPoint1: CGPoint(x: 56.44, y: 55.51), controlPoint2: CGPoint(x: 55.86, y: 56.09))
        chevronPath.addCurve(to: CGPoint(x: 52.57, y: 56.57), controlPoint1: CGPoint(x: 54.45, y: 56.57), controlPoint2: CGPoint(x: 53.82, y: 56.57))
        chevronPath.addLine(to: CGPoint(x: -52.57, y: 56.57))
        chevronPath.addCurve(to: CGPoint(x: -55.02, y: 56.38), controlPoint1: CGPoint(x: -53.82, y: 56.57), controlPoint2: CGPoint(x: -54.45, y: 56.57))
        chevronPath.addCurve(to: CGPoint(x: -56.71, y: 54.78), controlPoint1: CGPoint(x: -55.9, y: 56.05), controlPoint2: CGPoint(x: -56.45, y: 55.49))
        chevronPath.addCurve(to: CGPoint(x: -56.86, y: 54.06), controlPoint1: CGPoint(x: -56.78, y: 54.54), controlPoint2: CGPoint(x: -56.83, y: 54.31))
        chevronPath.addCurve(to: CGPoint(x: -56.92, y: 52.79), controlPoint1: CGPoint(x: -56.91, y: 53.71), controlPoint2: CGPoint(x: -56.92, y: 53.31))
        chevronPath.addLine(to: CGPoint(x: -56.92, y: 52.24))
        chevronPath.addLine(to: CGPoint(x: -56.92, y: 49.58))
        chevronPath.addCurve(to: CGPoint(x: -56.74, y: 47.15), controlPoint1: CGPoint(x: -56.92, y: 48.33), controlPoint2: CGPoint(x: -56.92, y: 47.71))
        chevronPath.addCurve(to: CGPoint(x: -56.92, y: -52), controlPoint1: CGPoint(x: -56.92, y: 47.36), controlPoint2: CGPoint(x: -56.92, y: -52))
        chevronPath.addCurve(to: CGPoint(x: -56.74, y: -54.67), controlPoint1: CGPoint(x: -56.92, y: -53.49), controlPoint2: CGPoint(x: -56.92, y: -54.11))
        chevronPath.addCurve(to: CGPoint(x: -55.12, y: -56.36), controlPoint1: CGPoint(x: -56.44, y: -55.51), controlPoint2: CGPoint(x: -55.86, y: -56.09))
        chevronPath.addCurve(to: CGPoint(x: -52.57, y: -56.57), controlPoint1: CGPoint(x: -54.45, y: -56.57), controlPoint2: CGPoint(x: -53.82, y: -56.57))
        chevronPath.addLine(to: CGPoint(x: -41.76, y: -56.57))
        chevronPath.addLine(to: CGPoint(x: -41.53, y: -56.57))
        chevronPath.close()
        iconColor.setFill()
        chevronPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawLightBackdrop(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1024, height: 1024), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1024, height: 1024), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1024, y: resizedFrame.height / 1024)


        //// music sun
        //// sun Drawing
        let sunPath = UIBezierPath(ovalIn: CGRect(x: 63.85, y: 64, width: 896, height: 895.7))
        StyleKit.lightTintColor.setFill()
        sunPath.fill()




        //// mountain Drawing
        let mountainPath = UIBezierPath()
        mountainPath.move(to: CGPoint(x: 558.27, y: 550.53))
        mountainPath.addCurve(to: CGPoint(x: 707.02, y: 767.07), controlPoint1: CGPoint(x: 592.27, y: 603.69), controlPoint2: CGPoint(x: 674.6, y: 723.67))
        mountainPath.addCurve(to: CGPoint(x: 767, y: 707), controlPoint1: CGPoint(x: 740.21, y: 733.57), controlPoint2: CGPoint(x: 765.66, y: 708.01))
        mountainPath.addCurve(to: CGPoint(x: 809, y: 689), controlPoint1: CGPoint(x: 771, y: 704), controlPoint2: CGPoint(x: 800, y: 686))
        mountainPath.addCurve(to: CGPoint(x: 928, y: 832.17), controlPoint1: CGPoint(x: 818, y: 692), controlPoint2: CGPoint(x: 922, y: 826.34))
        mountainPath.addCurve(to: CGPoint(x: 1001, y: 864), controlPoint1: CGPoint(x: 934, y: 838), controlPoint2: CGPoint(x: 991, y: 854))
        mountainPath.addCurve(to: CGPoint(x: 1068, y: 972), controlPoint1: CGPoint(x: 1011, y: 874), controlPoint2: CGPoint(x: 1068, y: 972))
        mountainPath.addLine(to: CGPoint(x: 1102, y: 1024))
        mountainPath.addLine(to: CGPoint(x: -77, y: 1024))
        mountainPath.addCurve(to: CGPoint(x: -7, y: 926), controlPoint1: CGPoint(x: -77, y: 1024), controlPoint2: CGPoint(x: -23, y: 940))
        mountainPath.addCurve(to: CGPoint(x: 102, y: 890), controlPoint1: CGPoint(x: 9, y: 912), controlPoint2: CGPoint(x: 96, y: 896))
        mountainPath.addCurve(to: CGPoint(x: 204, y: 776), controlPoint1: CGPoint(x: 108, y: 884), controlPoint2: CGPoint(x: 188, y: 785))
        mountainPath.addCurve(to: CGPoint(x: 286, y: 776), controlPoint1: CGPoint(x: 220, y: 767), controlPoint2: CGPoint(x: 272, y: 783))
        mountainPath.addCurve(to: CGPoint(x: 386, y: 675), controlPoint1: CGPoint(x: 300, y: 769), controlPoint2: CGPoint(x: 386, y: 675))
        mountainPath.addCurve(to: CGPoint(x: 501, y: 514), controlPoint1: CGPoint(x: 386, y: 675), controlPoint2: CGPoint(x: 486, y: 513))
        mountainPath.addCurve(to: CGPoint(x: 558.27, y: 550.53), controlPoint1: CGPoint(x: 516, y: 515), controlPoint2: CGPoint(x: 517, y: 486))
        mountainPath.close()
        UIColor.black.setFill()
        mountainPath.fill()


        //// cloud Drawing
        let cloudPath = UIBezierPath()
        cloudPath.move(to: CGPoint(x: 739.79, y: 1085.31))
        cloudPath.addCurve(to: CGPoint(x: 506.9, y: 1264.86), controlPoint1: CGPoint(x: 703.66, y: 1189.77), controlPoint2: CGPoint(x: 623.6, y: 1264.86))
        cloudPath.addCurve(to: CGPoint(x: 239.28, y: 1127.6), controlPoint1: CGPoint(x: 406.65, y: 1264.86), controlPoint2: CGPoint(x: 284.83, y: 1209.44))
        cloudPath.addCurve(to: CGPoint(x: 97.95, y: 1170.77), controlPoint1: CGPoint(x: 198.92, y: 1154.85), controlPoint2: CGPoint(x: 150.28, y: 1170.77))
        cloudPath.addCurve(to: CGPoint(x: -155, y: 917.9), controlPoint1: CGPoint(x: -41.65, y: 1170.77), controlPoint2: CGPoint(x: -155, y: 1057.46))
        cloudPath.addCurve(to: CGPoint(x: 34.93, y: 682.05), controlPoint1: CGPoint(x: -155, y: 810.53), controlPoint2: CGPoint(x: -59.58, y: 718.7))
        cloudPath.addCurve(to: CGPoint(x: 30.21, y: 629.74), controlPoint1: CGPoint(x: 31.83, y: 665.08), controlPoint2: CGPoint(x: 30.21, y: 647.6))
        cloudPath.addCurve(to: CGPoint(x: 292.08, y: 339.62), controlPoint1: CGPoint(x: 30.21, y: 469.62), controlPoint2: CGPoint(x: 133.41, y: 361.47))
        cloudPath.addCurve(to: CGPoint(x: 584.18, y: 476.7), controlPoint1: CGPoint(x: 416.63, y: 322.46), controlPoint2: CGPoint(x: 532.93, y: 394.43))
        cloudPath.addCurve(to: CGPoint(x: 753.34, y: 386.66), controlPoint1: CGPoint(x: 620.83, y: 422.4), controlPoint2: CGPoint(x: 682.94, y: 386.66))
        cloudPath.addCurve(to: CGPoint(x: 926.91, y: 590.53), controlPoint1: CGPoint(x: 865.9, y: 386.66), controlPoint2: CGPoint(x: 926.91, y: 478.01))
        cloudPath.addLine(to: CGPoint(x: 926.91, y: 591.53))
        cloudPath.addCurve(to: CGPoint(x: 1177.9, y: 864.97), controlPoint1: CGPoint(x: 1067.42, y: 603.47), controlPoint2: CGPoint(x: 1177.9, y: 721.42))
        cloudPath.addCurve(to: CGPoint(x: 903.38, y: 1139.41), controlPoint1: CGPoint(x: 1177.9, y: 1016.44), controlPoint2: CGPoint(x: 1054.89, y: 1139.41))
        cloudPath.addCurve(to: CGPoint(x: 739.79, y: 1085.31), controlPoint1: CGPoint(x: 842.1, y: 1139.41), controlPoint2: CGPoint(x: 785.49, y: 1119.29))
        cloudPath.close()
        cloudPath.usesEvenOddFillRule = true
        StyleKit.lightCloudColor.setFill()
        cloudPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawLightPlaceholderReleaseArtwork(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// music sun
        //// sun Drawing
        let sunPath = UIBezierPath(ovalIn: CGRect(x: 19, y: 19, width: 262, height: 262))
        StyleKit.lightTintColor.setFill()
        sunPath.fill()


        //// music symbol Drawing
        let musicSymbolPath = UIBezierPath()
        musicSymbolPath.move(to: CGPoint(x: 128.39, y: 194.89))
        musicSymbolPath.addCurve(to: CGPoint(x: 109.11, y: 212.97), controlPoint1: CGPoint(x: 128.28, y: 201.45), controlPoint2: CGPoint(x: 125.15, y: 211.9))
        musicSymbolPath.addCurve(to: CGPoint(x: 91.24, y: 203.76), controlPoint1: CGPoint(x: 103.89, y: 213.32), controlPoint2: CGPoint(x: 91.84, y: 210.79))
        musicSymbolPath.addLine(to: CGPoint(x: 91, y: 200.93))
        musicSymbolPath.addCurve(to: CGPoint(x: 121.31, y: 180.96), controlPoint1: CGPoint(x: 91.22, y: 179.03), controlPoint2: CGPoint(x: 120.24, y: 185.97))
        musicSymbolPath.addCurve(to: CGPoint(x: 121.31, y: 116.07), controlPoint1: CGPoint(x: 123.75, y: 169.52), controlPoint2: CGPoint(x: 121.31, y: 116.07))
        musicSymbolPath.addLine(to: CGPoint(x: 121.31, y: 106.94))
        musicSymbolPath.addCurve(to: CGPoint(x: 125.02, y: 103.15), controlPoint1: CGPoint(x: 121.31, y: 104.85), controlPoint2: CGPoint(x: 123.33, y: 103.63))
        musicSymbolPath.addCurve(to: CGPoint(x: 183.29, y: 88.05), controlPoint1: CGPoint(x: 135.78, y: 100.08), controlPoint2: CGPoint(x: 172.47, y: 90.48))
        musicSymbolPath.addCurve(to: CGPoint(x: 187, y: 91.84), controlPoint1: CGPoint(x: 185, y: 87.66), controlPoint2: CGPoint(x: 187, y: 89.75))
        musicSymbolPath.addLine(to: CGPoint(x: 187, y: 109.54))
        musicSymbolPath.addLine(to: CGPoint(x: 187, y: 174.68))
        musicSymbolPath.addCurve(to: CGPoint(x: 187, y: 174.78), controlPoint1: CGPoint(x: 187, y: 174.71), controlPoint2: CGPoint(x: 187, y: 174.75))
        musicSymbolPath.addCurve(to: CGPoint(x: 165.4, y: 192.86), controlPoint1: CGPoint(x: 186.9, y: 181.34), controlPoint2: CGPoint(x: 181.81, y: 192.25))
        musicSymbolPath.addCurve(to: CGPoint(x: 152.54, y: 183.65), controlPoint1: CGPoint(x: 160.17, y: 193.05), controlPoint2: CGPoint(x: 153.15, y: 190.67))
        musicSymbolPath.addLine(to: CGPoint(x: 152.3, y: 180.82))
        musicSymbolPath.addCurve(to: CGPoint(x: 181.23, y: 160.85), controlPoint1: CGPoint(x: 152.92, y: 161.46), controlPoint2: CGPoint(x: 181.04, y: 165.45))
        musicSymbolPath.addCurve(to: CGPoint(x: 181.24, y: 115.49), controlPoint1: CGPoint(x: 181.6, y: 152.38), controlPoint2: CGPoint(x: 181.34, y: 123.14))
        musicSymbolPath.addCurve(to: CGPoint(x: 180.67, y: 114.94), controlPoint1: CGPoint(x: 181.24, y: 115.22), controlPoint2: CGPoint(x: 180.93, y: 114.89))
        musicSymbolPath.addCurve(to: CGPoint(x: 128.85, y: 126.84), controlPoint1: CGPoint(x: 171.98, y: 116.67), controlPoint2: CGPoint(x: 138, y: 124.85))
        musicSymbolPath.addCurve(to: CGPoint(x: 128.39, y: 127.33), controlPoint1: CGPoint(x: 128.63, y: 126.89), controlPoint2: CGPoint(x: 128.39, y: 127.1))
        musicSymbolPath.addCurve(to: CGPoint(x: 128.39, y: 194.79), controlPoint1: CGPoint(x: 128.31, y: 138.66), controlPoint2: CGPoint(x: 128.39, y: 194.79))
        musicSymbolPath.addCurve(to: CGPoint(x: 128.39, y: 194.89), controlPoint1: CGPoint(x: 128.39, y: 194.83), controlPoint2: CGPoint(x: 128.39, y: 194.86))
        musicSymbolPath.close()
        musicSymbolPath.usesEvenOddFillRule = true
        StyleKit.lightIconGlyphColor.setFill()
        musicSymbolPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawDarkPlaceholderReleaseArtwork(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// album base Drawing
        let albumBasePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 300, height: 300))
        StyleKit.darkBackgroundColor.setFill()
        albumBasePath.fill()


        //// music sun
        //// sun Drawing
        let sunPath = UIBezierPath(ovalIn: CGRect(x: 19, y: 19, width: 262, height: 262))
        StyleKit.darkTintColor.setFill()
        sunPath.fill()


        //// music symbol Drawing
        let musicSymbolPath = UIBezierPath()
        musicSymbolPath.move(to: CGPoint(x: 127.39, y: 194.89))
        musicSymbolPath.addCurve(to: CGPoint(x: 108.11, y: 212.97), controlPoint1: CGPoint(x: 127.28, y: 201.45), controlPoint2: CGPoint(x: 124.15, y: 211.9))
        musicSymbolPath.addCurve(to: CGPoint(x: 90.24, y: 203.76), controlPoint1: CGPoint(x: 102.89, y: 213.32), controlPoint2: CGPoint(x: 90.84, y: 210.79))
        musicSymbolPath.addLine(to: CGPoint(x: 90, y: 200.93))
        musicSymbolPath.addCurve(to: CGPoint(x: 120.31, y: 180.96), controlPoint1: CGPoint(x: 90.22, y: 179.03), controlPoint2: CGPoint(x: 119.24, y: 185.97))
        musicSymbolPath.addCurve(to: CGPoint(x: 120.31, y: 116.07), controlPoint1: CGPoint(x: 122.75, y: 169.52), controlPoint2: CGPoint(x: 120.31, y: 116.07))
        musicSymbolPath.addLine(to: CGPoint(x: 120.31, y: 106.94))
        musicSymbolPath.addCurve(to: CGPoint(x: 124.02, y: 103.15), controlPoint1: CGPoint(x: 120.31, y: 104.85), controlPoint2: CGPoint(x: 122.33, y: 103.63))
        musicSymbolPath.addCurve(to: CGPoint(x: 182.29, y: 88.05), controlPoint1: CGPoint(x: 134.78, y: 100.08), controlPoint2: CGPoint(x: 171.47, y: 90.48))
        musicSymbolPath.addCurve(to: CGPoint(x: 186, y: 91.84), controlPoint1: CGPoint(x: 184, y: 87.66), controlPoint2: CGPoint(x: 186, y: 89.75))
        musicSymbolPath.addLine(to: CGPoint(x: 186, y: 109.54))
        musicSymbolPath.addLine(to: CGPoint(x: 186, y: 174.68))
        musicSymbolPath.addCurve(to: CGPoint(x: 186, y: 174.78), controlPoint1: CGPoint(x: 186, y: 174.71), controlPoint2: CGPoint(x: 186, y: 174.75))
        musicSymbolPath.addCurve(to: CGPoint(x: 164.4, y: 192.86), controlPoint1: CGPoint(x: 185.9, y: 181.34), controlPoint2: CGPoint(x: 180.81, y: 192.25))
        musicSymbolPath.addCurve(to: CGPoint(x: 151.54, y: 183.65), controlPoint1: CGPoint(x: 159.17, y: 193.05), controlPoint2: CGPoint(x: 152.15, y: 190.67))
        musicSymbolPath.addLine(to: CGPoint(x: 151.3, y: 180.82))
        musicSymbolPath.addCurve(to: CGPoint(x: 180.23, y: 160.85), controlPoint1: CGPoint(x: 151.92, y: 161.46), controlPoint2: CGPoint(x: 180.04, y: 165.45))
        musicSymbolPath.addCurve(to: CGPoint(x: 180.24, y: 115.49), controlPoint1: CGPoint(x: 180.6, y: 152.38), controlPoint2: CGPoint(x: 180.34, y: 123.14))
        musicSymbolPath.addCurve(to: CGPoint(x: 179.67, y: 114.94), controlPoint1: CGPoint(x: 180.24, y: 115.22), controlPoint2: CGPoint(x: 179.93, y: 114.89))
        musicSymbolPath.addCurve(to: CGPoint(x: 127.85, y: 126.84), controlPoint1: CGPoint(x: 170.98, y: 116.67), controlPoint2: CGPoint(x: 137, y: 124.85))
        musicSymbolPath.addCurve(to: CGPoint(x: 127.39, y: 127.33), controlPoint1: CGPoint(x: 127.63, y: 126.89), controlPoint2: CGPoint(x: 127.39, y: 127.1))
        musicSymbolPath.addCurve(to: CGPoint(x: 127.39, y: 194.79), controlPoint1: CGPoint(x: 127.31, y: 138.66), controlPoint2: CGPoint(x: 127.39, y: 194.79))
        musicSymbolPath.addCurve(to: CGPoint(x: 127.39, y: 194.89), controlPoint1: CGPoint(x: 127.39, y: 194.83), controlPoint2: CGPoint(x: 127.39, y: 194.86))
        musicSymbolPath.close()
        musicSymbolPath.usesEvenOddFillRule = true
        StyleKit.darkIconGlyphColor.setFill()
        musicSymbolPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawSettingsIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 159.94, y: 84.86))
        bezier2Path.addCurve(to: CGPoint(x: 163.96, y: 91.75), controlPoint1: CGPoint(x: 162.5, y: 85.59), controlPoint2: CGPoint(x: 162.92, y: 87.32))
        bezier2Path.addCurve(to: CGPoint(x: 170.29, y: 100.04), controlPoint1: CGPoint(x: 164.86, y: 95.6), controlPoint2: CGPoint(x: 167.42, y: 98.86))
        bezier2Path.addCurve(to: CGPoint(x: 181.21, y: 98.84), controlPoint1: CGPoint(x: 173.17, y: 101.22), controlPoint2: CGPoint(x: 177.83, y: 101))
        bezier2Path.addCurve(to: CGPoint(x: 188.93, y: 96.81), controlPoint1: CGPoint(x: 185.09, y: 96.38), controlPoint2: CGPoint(x: 186.6, y: 95.52))
        bezier2Path.addCurve(to: CGPoint(x: 203.09, y: 110.97), controlPoint1: CGPoint(x: 192.58, y: 98.83), controlPoint2: CGPoint(x: 201.07, y: 107.33))
        bezier2Path.addCurve(to: CGPoint(x: 201.06, y: 118.69), controlPoint1: CGPoint(x: 204.38, y: 113.3), controlPoint2: CGPoint(x: 203.46, y: 114.82))
        bezier2Path.addCurve(to: CGPoint(x: 199.74, y: 129.58), controlPoint1: CGPoint(x: 198.78, y: 122.37), controlPoint2: CGPoint(x: 198.54, y: 126.71))
        bezier2Path.addCurve(to: CGPoint(x: 208.25, y: 135.9), controlPoint1: CGPoint(x: 200.94, y: 132.45), controlPoint2: CGPoint(x: 203.95, y: 134.94))
        bezier2Path.addCurve(to: CGPoint(x: 215.14, y: 139.92), controlPoint1: CGPoint(x: 212.73, y: 136.9), controlPoint2: CGPoint(x: 214.41, y: 137.36))
        bezier2Path.addCurve(to: CGPoint(x: 215.14, y: 159.94), controlPoint1: CGPoint(x: 216.29, y: 143.93), controlPoint2: CGPoint(x: 216.29, y: 155.94))
        bezier2Path.addCurve(to: CGPoint(x: 208.25, y: 163.96), controlPoint1: CGPoint(x: 214.41, y: 162.5), controlPoint2: CGPoint(x: 212.68, y: 162.92))
        bezier2Path.addCurve(to: CGPoint(x: 199.85, y: 170.06), controlPoint1: CGPoint(x: 203.56, y: 165.06), controlPoint2: CGPoint(x: 201.03, y: 167.18))
        bezier2Path.addCurve(to: CGPoint(x: 201.16, y: 181.21), controlPoint1: CGPoint(x: 198.67, y: 172.93), controlPoint2: CGPoint(x: 198.54, y: 177.1))
        bezier2Path.addCurve(to: CGPoint(x: 203.19, y: 188.93), controlPoint1: CGPoint(x: 203.62, y: 185.09), controlPoint2: CGPoint(x: 204.48, y: 186.6))
        bezier2Path.addCurve(to: CGPoint(x: 189.03, y: 203.09), controlPoint1: CGPoint(x: 201.17, y: 192.58), controlPoint2: CGPoint(x: 192.67, y: 201.07))
        bezier2Path.addCurve(to: CGPoint(x: 181.31, y: 201.06), controlPoint1: CGPoint(x: 186.7, y: 204.38), controlPoint2: CGPoint(x: 185.18, y: 203.46))
        bezier2Path.addCurve(to: CGPoint(x: 170.56, y: 199.64), controlPoint1: CGPoint(x: 177.24, y: 198.53), controlPoint2: CGPoint(x: 173.45, y: 198.44))
        bezier2Path.addCurve(to: CGPoint(x: 163.96, y: 208.25), controlPoint1: CGPoint(x: 167.67, y: 200.83), controlPoint2: CGPoint(x: 165.06, y: 203.58))
        bezier2Path.addCurve(to: CGPoint(x: 159.94, y: 215.14), controlPoint1: CGPoint(x: 162.92, y: 212.68), controlPoint2: CGPoint(x: 162.5, y: 214.41))
        bezier2Path.addCurve(to: CGPoint(x: 139.92, y: 215.14), controlPoint1: CGPoint(x: 155.94, y: 216.29), controlPoint2: CGPoint(x: 143.93, y: 216.29))
        bezier2Path.addCurve(to: CGPoint(x: 135.9, y: 208.25), controlPoint1: CGPoint(x: 137.36, y: 214.41), controlPoint2: CGPoint(x: 136.9, y: 212.73))
        bezier2Path.addCurve(to: CGPoint(x: 129.46, y: 199.64), controlPoint1: CGPoint(x: 134.84, y: 203.48), controlPoint2: CGPoint(x: 132.33, y: 200.84))
        bezier2Path.addCurve(to: CGPoint(x: 118.69, y: 201.06), controlPoint1: CGPoint(x: 126.59, y: 198.44), controlPoint2: CGPoint(x: 122.78, y: 198.52))
        bezier2Path.addCurve(to: CGPoint(x: 110.97, y: 203.09), controlPoint1: CGPoint(x: 114.82, y: 203.46), controlPoint2: CGPoint(x: 113.3, y: 204.38))
        bezier2Path.addCurve(to: CGPoint(x: 96.81, y: 188.93), controlPoint1: CGPoint(x: 107.33, y: 201.07), controlPoint2: CGPoint(x: 98.83, y: 192.58))
        bezier2Path.addCurve(to: CGPoint(x: 98.84, y: 181.21), controlPoint1: CGPoint(x: 95.52, y: 186.6), controlPoint2: CGPoint(x: 96.38, y: 185.09))
        bezier2Path.addCurve(to: CGPoint(x: 100.48, y: 171.11), controlPoint1: CGPoint(x: 101.23, y: 177.45), controlPoint2: CGPoint(x: 101.67, y: 173.99))
        bezier2Path.addCurve(to: CGPoint(x: 91.75, y: 163.96), controlPoint1: CGPoint(x: 99.3, y: 168.24), controlPoint2: CGPoint(x: 96.02, y: 164.96))
        bezier2Path.addCurve(to: CGPoint(x: 84.86, y: 159.94), controlPoint1: CGPoint(x: 87.32, y: 162.92), controlPoint2: CGPoint(x: 85.59, y: 162.5))
        bezier2Path.addCurve(to: CGPoint(x: 84.86, y: 139.92), controlPoint1: CGPoint(x: 83.71, y: 155.94), controlPoint2: CGPoint(x: 83.71, y: 143.93))
        bezier2Path.addCurve(to: CGPoint(x: 91.75, y: 135.9), controlPoint1: CGPoint(x: 85.59, y: 137.36), controlPoint2: CGPoint(x: 87.27, y: 136.9))
        bezier2Path.addCurve(to: CGPoint(x: 100.25, y: 129.54), controlPoint1: CGPoint(x: 95.69, y: 135.02), controlPoint2: CGPoint(x: 99.05, y: 132.41))
        bezier2Path.addCurve(to: CGPoint(x: 98.94, y: 118.69), controlPoint1: CGPoint(x: 101.45, y: 126.67), controlPoint2: CGPoint(x: 101.04, y: 122.07))
        bezier2Path.addCurve(to: CGPoint(x: 96.91, y: 110.97), controlPoint1: CGPoint(x: 96.54, y: 114.82), controlPoint2: CGPoint(x: 95.62, y: 113.3))
        bezier2Path.addCurve(to: CGPoint(x: 111.07, y: 96.81), controlPoint1: CGPoint(x: 98.93, y: 107.33), controlPoint2: CGPoint(x: 107.42, y: 98.83))
        bezier2Path.addCurve(to: CGPoint(x: 118.79, y: 98.84), controlPoint1: CGPoint(x: 113.4, y: 95.52), controlPoint2: CGPoint(x: 114.91, y: 96.38))
        bezier2Path.addCurve(to: CGPoint(x: 129.93, y: 100.04), controlPoint1: CGPoint(x: 122.06, y: 100.93), controlPoint2: CGPoint(x: 127.07, y: 101.22))
        bezier2Path.addCurve(to: CGPoint(x: 135.9, y: 91.75), controlPoint1: CGPoint(x: 132.78, y: 98.86), controlPoint2: CGPoint(x: 135.05, y: 95.54))
        bezier2Path.addCurve(to: CGPoint(x: 139.92, y: 84.86), controlPoint1: CGPoint(x: 136.9, y: 87.27), controlPoint2: CGPoint(x: 137.36, y: 85.59))
        bezier2Path.addCurve(to: CGPoint(x: 144.16, y: 84.22), controlPoint1: CGPoint(x: 140.92, y: 84.58), controlPoint2: CGPoint(x: 142.42, y: 84.36))
        bezier2Path.addCurve(to: CGPoint(x: 159.94, y: 84.86), controlPoint1: CGPoint(x: 149.42, y: 83.78), controlPoint2: CGPoint(x: 156.94, y: 84))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 150.43, y: 124.03))
        bezier2Path.addCurve(to: CGPoint(x: 142.15, y: 125.4), controlPoint1: CGPoint(x: 147.53, y: 124.03), controlPoint2: CGPoint(x: 144.74, y: 124.51))
        bezier2Path.addCurve(to: CGPoint(x: 124.88, y: 149.57), controlPoint1: CGPoint(x: 132.1, y: 128.84), controlPoint2: CGPoint(x: 124.88, y: 138.36))
        bezier2Path.addCurve(to: CGPoint(x: 150.43, y: 175.12), controlPoint1: CGPoint(x: 124.88, y: 163.68), controlPoint2: CGPoint(x: 136.32, y: 175.12))
        bezier2Path.addCurve(to: CGPoint(x: 175.97, y: 149.57), controlPoint1: CGPoint(x: 164.54, y: 175.12), controlPoint2: CGPoint(x: 175.97, y: 163.68))
        bezier2Path.addCurve(to: CGPoint(x: 150.43, y: 124.03), controlPoint1: CGPoint(x: 175.97, y: 135.46), controlPoint2: CGPoint(x: 164.54, y: 124.03))
        bezier2Path.close()
        iconColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawArtistsIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 177.81, y: 170.95))
        bezierPath.addCurve(to: CGPoint(x: 210.49, y: 178.53), controlPoint1: CGPoint(x: 191.49, y: 174.12), controlPoint2: CGPoint(x: 203.82, y: 176.97))
        bezierPath.addCurve(to: CGPoint(x: 217.33, y: 180.12), controlPoint1: CGPoint(x: 213.32, y: 179.19), controlPoint2: CGPoint(x: 215.64, y: 179.78))
        bezierPath.addCurve(to: CGPoint(x: 222.74, y: 159.38), controlPoint1: CGPoint(x: 222.93, y: 181.25), controlPoint2: CGPoint(x: 228.12, y: 161.28))
        bezierPath.addCurve(to: CGPoint(x: 214.97, y: 157.18), controlPoint1: CGPoint(x: 220.89, y: 158.73), controlPoint2: CGPoint(x: 218.19, y: 158.1))
        bezierPath.addCurve(to: CGPoint(x: 124.04, y: 132.03), controlPoint1: CGPoint(x: 196.62, y: 151.9), controlPoint2: CGPoint(x: 138.82, y: 136.43))
        bezierPath.addCurve(to: CGPoint(x: 108.37, y: 114.89), controlPoint1: CGPoint(x: 122.71, y: 123.91), controlPoint2: CGPoint(x: 117.61, y: 117.34))
        bezierPath.addCurve(to: CGPoint(x: 76.81, y: 132.83), controlPoint1: CGPoint(x: 94.49, y: 111.22), controlPoint2: CGPoint(x: 80.35, y: 119.25))
        bezierPath.addCurve(to: CGPoint(x: 95.54, y: 164.08), controlPoint1: CGPoint(x: 73.27, y: 146.4), controlPoint2: CGPoint(x: 81.66, y: 160.4))
        bezierPath.addCurve(to: CGPoint(x: 117.53, y: 156.94), controlPoint1: CGPoint(x: 104.77, y: 166.52), controlPoint2: CGPoint(x: 112.4, y: 163.34))
        bezierPath.addCurve(to: CGPoint(x: 143.35, y: 162.97), controlPoint1: CGPoint(x: 122.47, y: 158.11), controlPoint2: CGPoint(x: 132.05, y: 160.34))
        bezierPath.addCurve(to: CGPoint(x: 146.26, y: 168.8), controlPoint1: CGPoint(x: 144.16, y: 164.72), controlPoint2: CGPoint(x: 145.12, y: 166.67))
        bezierPath.addCurve(to: CGPoint(x: 153.45, y: 182.69), controlPoint1: CGPoint(x: 149.34, y: 174.54), controlPoint2: CGPoint(x: 153.45, y: 182.69))
        bezierPath.addLine(to: CGPoint(x: 153.57, y: 182.98))
        bezierPath.addLine(to: CGPoint(x: 153.57, y: 299.82))
        bezierPath.addLine(to: CGPoint(x: 167.56, y: 299.82))
        bezierPath.addLine(to: CGPoint(x: 167.56, y: 189.54))
        bezierPath.addCurve(to: CGPoint(x: 176.27, y: 173.07), controlPoint1: CGPoint(x: 170.51, y: 184.58), controlPoint2: CGPoint(x: 172.57, y: 178.04))
        bezierPath.addCurve(to: CGPoint(x: 177.81, y: 170.95), controlPoint1: CGPoint(x: 176.72, y: 172.46), controlPoint2: CGPoint(x: 177.25, y: 171.73))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        iconColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawLightPlaceholderArtistArtwork(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// music sun
        //// sun Drawing
        let sunPath = UIBezierPath(ovalIn: CGRect(x: 19, y: 19, width: 262, height: 262))
        StyleKit.lightTintColor.setFill()
        sunPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 173.51, y: 167.21))
        bezierPath.addCurve(to: CGPoint(x: 202.24, y: 173.89), controlPoint1: CGPoint(x: 185.53, y: 170), controlPoint2: CGPoint(x: 196.38, y: 172.52))
        bezierPath.addCurve(to: CGPoint(x: 208.25, y: 175.29), controlPoint1: CGPoint(x: 204.73, y: 174.48), controlPoint2: CGPoint(x: 206.77, y: 174.99))
        bezierPath.addCurve(to: CGPoint(x: 213.01, y: 157), controlPoint1: CGPoint(x: 213.18, y: 176.29), controlPoint2: CGPoint(x: 217.74, y: 158.68))
        bezierPath.addCurve(to: CGPoint(x: 206.18, y: 155.07), controlPoint1: CGPoint(x: 211.39, y: 156.43), controlPoint2: CGPoint(x: 209.01, y: 155.88))
        bezierPath.addCurve(to: CGPoint(x: 126.23, y: 132.9), controlPoint1: CGPoint(x: 190.05, y: 150.42), controlPoint2: CGPoint(x: 139.23, y: 136.77))
        bezierPath.addCurve(to: CGPoint(x: 112.46, y: 117.78), controlPoint1: CGPoint(x: 125.07, y: 125.74), controlPoint2: CGPoint(x: 120.58, y: 119.94))
        bezierPath.addCurve(to: CGPoint(x: 84.71, y: 133.6), controlPoint1: CGPoint(x: 100.26, y: 114.54), controlPoint2: CGPoint(x: 87.83, y: 121.63))
        bezierPath.addCurve(to: CGPoint(x: 101.18, y: 161.15), controlPoint1: CGPoint(x: 81.6, y: 145.56), controlPoint2: CGPoint(x: 88.98, y: 157.91))
        bezierPath.addCurve(to: CGPoint(x: 120.51, y: 154.85), controlPoint1: CGPoint(x: 109.29, y: 163.3), controlPoint2: CGPoint(x: 116.01, y: 160.5))
        bezierPath.addCurve(to: CGPoint(x: 143.21, y: 160.17), controlPoint1: CGPoint(x: 124.86, y: 155.89), controlPoint2: CGPoint(x: 133.28, y: 157.86))
        bezierPath.addCurve(to: CGPoint(x: 145.77, y: 165.32), controlPoint1: CGPoint(x: 143.92, y: 161.72), controlPoint2: CGPoint(x: 144.77, y: 163.44))
        bezierPath.addCurve(to: CGPoint(x: 152.1, y: 177.56), controlPoint1: CGPoint(x: 148.48, y: 170.37), controlPoint2: CGPoint(x: 152.1, y: 177.56))
        bezierPath.addLine(to: CGPoint(x: 152.2, y: 177.81))
        bezierPath.addLine(to: CGPoint(x: 152.2, y: 280.82))
        bezierPath.addLine(to: CGPoint(x: 164.5, y: 280.82))
        bezierPath.addLine(to: CGPoint(x: 164.5, y: 183.59))
        bezierPath.addCurve(to: CGPoint(x: 172.15, y: 169.08), controlPoint1: CGPoint(x: 167.09, y: 179.22), controlPoint2: CGPoint(x: 168.91, y: 173.46))
        bezierPath.addCurve(to: CGPoint(x: 173.51, y: 167.21), controlPoint1: CGPoint(x: 172.55, y: 168.54), controlPoint2: CGPoint(x: 173.02, y: 167.89))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit.lightIconGlyphColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawDarkPlaceholderArtistArtwork(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// album base Drawing
        let albumBasePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 300, height: 300))
        StyleKit.darkBackgroundColor.setFill()
        albumBasePath.fill()


        //// music sun
        //// sun Drawing
        let sunPath = UIBezierPath(ovalIn: CGRect(x: 19, y: 19, width: 262, height: 262))
        StyleKit.darkTintColor.setFill()
        sunPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 173.51, y: 167.21))
        bezierPath.addCurve(to: CGPoint(x: 202.24, y: 173.89), controlPoint1: CGPoint(x: 185.53, y: 170), controlPoint2: CGPoint(x: 196.38, y: 172.52))
        bezierPath.addCurve(to: CGPoint(x: 208.25, y: 175.29), controlPoint1: CGPoint(x: 204.73, y: 174.48), controlPoint2: CGPoint(x: 206.77, y: 174.99))
        bezierPath.addCurve(to: CGPoint(x: 213.01, y: 157), controlPoint1: CGPoint(x: 213.18, y: 176.29), controlPoint2: CGPoint(x: 217.74, y: 158.68))
        bezierPath.addCurve(to: CGPoint(x: 206.18, y: 155.07), controlPoint1: CGPoint(x: 211.39, y: 156.43), controlPoint2: CGPoint(x: 209.01, y: 155.88))
        bezierPath.addCurve(to: CGPoint(x: 126.23, y: 132.9), controlPoint1: CGPoint(x: 190.05, y: 150.42), controlPoint2: CGPoint(x: 139.23, y: 136.77))
        bezierPath.addCurve(to: CGPoint(x: 112.46, y: 117.78), controlPoint1: CGPoint(x: 125.07, y: 125.74), controlPoint2: CGPoint(x: 120.58, y: 119.94))
        bezierPath.addCurve(to: CGPoint(x: 84.71, y: 133.6), controlPoint1: CGPoint(x: 100.26, y: 114.54), controlPoint2: CGPoint(x: 87.83, y: 121.63))
        bezierPath.addCurve(to: CGPoint(x: 101.18, y: 161.15), controlPoint1: CGPoint(x: 81.6, y: 145.56), controlPoint2: CGPoint(x: 88.98, y: 157.91))
        bezierPath.addCurve(to: CGPoint(x: 120.51, y: 154.85), controlPoint1: CGPoint(x: 109.29, y: 163.3), controlPoint2: CGPoint(x: 116.01, y: 160.5))
        bezierPath.addCurve(to: CGPoint(x: 143.21, y: 160.17), controlPoint1: CGPoint(x: 124.86, y: 155.89), controlPoint2: CGPoint(x: 133.28, y: 157.86))
        bezierPath.addCurve(to: CGPoint(x: 145.77, y: 165.32), controlPoint1: CGPoint(x: 143.92, y: 161.72), controlPoint2: CGPoint(x: 144.77, y: 163.44))
        bezierPath.addCurve(to: CGPoint(x: 152.1, y: 177.56), controlPoint1: CGPoint(x: 148.48, y: 170.37), controlPoint2: CGPoint(x: 152.1, y: 177.56))
        bezierPath.addLine(to: CGPoint(x: 152.2, y: 177.81))
        bezierPath.addLine(to: CGPoint(x: 152.2, y: 280.82))
        bezierPath.addLine(to: CGPoint(x: 164.5, y: 280.82))
        bezierPath.addLine(to: CGPoint(x: 164.5, y: 183.59))
        bezierPath.addCurve(to: CGPoint(x: 172.15, y: 169.08), controlPoint1: CGPoint(x: 167.09, y: 179.22), controlPoint2: CGPoint(x: 168.91, y: 173.46))
        bezierPath.addCurve(to: CGPoint(x: 173.51, y: 167.21), controlPoint1: CGPoint(x: 172.55, y: 168.54), controlPoint2: CGPoint(x: 173.02, y: 167.89))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit.darkIconGlyphColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawDownIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 120), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 120)


        //// chevron Drawing
        context.saveGState()
        context.translateBy(x: 149.92, y: 26.57)
        context.rotate(by: -45 * CGFloat.pi/180)

        let chevronPath = UIBezierPath()
        chevronPath.move(to: CGPoint(x: -41.53, y: -56.57))
        chevronPath.addCurve(to: CGPoint(x: -39.31, y: -56.38), controlPoint1: CGPoint(x: -40.5, y: -56.57), controlPoint2: CGPoint(x: -39.88, y: -56.57))
        chevronPath.addCurve(to: CGPoint(x: -37.62, y: -54.78), controlPoint1: CGPoint(x: -38.47, y: -56.09), controlPoint2: CGPoint(x: -37.89, y: -55.51))
        chevronPath.addCurve(to: CGPoint(x: -37.41, y: -52.24), controlPoint1: CGPoint(x: -37.41, y: -54.11), controlPoint2: CGPoint(x: -37.41, y: -53.49))
        chevronPath.addCurve(to: CGPoint(x: -37.41, y: 37.17), controlPoint1: CGPoint(x: -37.41, y: -52.24), controlPoint2: CGPoint(x: -37.41, y: 13.78))
        chevronPath.addLine(to: CGPoint(x: 52.57, y: 37.17))
        chevronPath.addCurve(to: CGPoint(x: 55.02, y: 37.36), controlPoint1: CGPoint(x: 53.82, y: 37.17), controlPoint2: CGPoint(x: 54.45, y: 37.17))
        chevronPath.addCurve(to: CGPoint(x: 56.71, y: 38.96), controlPoint1: CGPoint(x: 55.86, y: 37.65), controlPoint2: CGPoint(x: 56.44, y: 38.23))
        chevronPath.addCurve(to: CGPoint(x: 56.92, y: 41.5), controlPoint1: CGPoint(x: 56.92, y: 39.63), controlPoint2: CGPoint(x: 56.92, y: 40.25))
        chevronPath.addLine(to: CGPoint(x: 56.92, y: 52.24))
        chevronPath.addCurve(to: CGPoint(x: 56.74, y: 54.67), controlPoint1: CGPoint(x: 56.92, y: 53.49), controlPoint2: CGPoint(x: 56.92, y: 54.11))
        chevronPath.addCurve(to: CGPoint(x: 55.12, y: 56.36), controlPoint1: CGPoint(x: 56.44, y: 55.51), controlPoint2: CGPoint(x: 55.86, y: 56.09))
        chevronPath.addCurve(to: CGPoint(x: 52.57, y: 56.57), controlPoint1: CGPoint(x: 54.45, y: 56.57), controlPoint2: CGPoint(x: 53.82, y: 56.57))
        chevronPath.addLine(to: CGPoint(x: -52.57, y: 56.57))
        chevronPath.addCurve(to: CGPoint(x: -55.02, y: 56.38), controlPoint1: CGPoint(x: -53.82, y: 56.57), controlPoint2: CGPoint(x: -54.45, y: 56.57))
        chevronPath.addCurve(to: CGPoint(x: -56.71, y: 54.78), controlPoint1: CGPoint(x: -55.9, y: 56.05), controlPoint2: CGPoint(x: -56.45, y: 55.49))
        chevronPath.addCurve(to: CGPoint(x: -56.86, y: 54.06), controlPoint1: CGPoint(x: -56.78, y: 54.54), controlPoint2: CGPoint(x: -56.83, y: 54.31))
        chevronPath.addCurve(to: CGPoint(x: -56.92, y: 52.79), controlPoint1: CGPoint(x: -56.91, y: 53.71), controlPoint2: CGPoint(x: -56.92, y: 53.31))
        chevronPath.addLine(to: CGPoint(x: -56.92, y: 52.24))
        chevronPath.addLine(to: CGPoint(x: -56.92, y: 49.58))
        chevronPath.addCurve(to: CGPoint(x: -56.74, y: 47.15), controlPoint1: CGPoint(x: -56.92, y: 48.33), controlPoint2: CGPoint(x: -56.92, y: 47.71))
        chevronPath.addCurve(to: CGPoint(x: -56.92, y: -52), controlPoint1: CGPoint(x: -56.92, y: 47.36), controlPoint2: CGPoint(x: -56.92, y: -52))
        chevronPath.addCurve(to: CGPoint(x: -56.74, y: -54.67), controlPoint1: CGPoint(x: -56.92, y: -53.49), controlPoint2: CGPoint(x: -56.92, y: -54.11))
        chevronPath.addCurve(to: CGPoint(x: -55.12, y: -56.36), controlPoint1: CGPoint(x: -56.44, y: -55.51), controlPoint2: CGPoint(x: -55.86, y: -56.09))
        chevronPath.addCurve(to: CGPoint(x: -52.57, y: -56.57), controlPoint1: CGPoint(x: -54.45, y: -56.57), controlPoint2: CGPoint(x: -53.82, y: -56.57))
        chevronPath.addLine(to: CGPoint(x: -41.76, y: -56.57))
        chevronPath.addLine(to: CGPoint(x: -41.53, y: -56.57))
        chevronPath.close()
        iconColor.setFill()
        chevronPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCheckmarkIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 79, y: 149.43)
        context.rotate(by: -45 * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 24.64, y: 0.52))
        bezierPath.addLine(to: CGPoint(x: 24.95, y: 0.6))
        bezierPath.addCurve(to: CGPoint(x: 29.4, y: 5.05), controlPoint1: CGPoint(x: 27.02, y: 1.35), controlPoint2: CGPoint(x: 28.65, y: 2.98))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 12.23), controlPoint1: CGPoint(x: 30, y: 6.95), controlPoint2: CGPoint(x: 30, y: 8.71))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 50), controlPoint1: CGPoint(x: 30, y: 12.23), controlPoint2: CGPoint(x: 30, y: 33.75))
        bezierPath.addLine(to: CGPoint(x: 107.77, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 114.64, y: 50.52), controlPoint1: CGPoint(x: 111.29, y: 50), controlPoint2: CGPoint(x: 113.05, y: 50))
        bezierPath.addLine(to: CGPoint(x: 114.95, y: 50.6))
        bezierPath.addCurve(to: CGPoint(x: 119.4, y: 55.05), controlPoint1: CGPoint(x: 117.02, y: 51.35), controlPoint2: CGPoint(x: 118.65, y: 52.98))
        bezierPath.addCurve(to: CGPoint(x: 120, y: 62.23), controlPoint1: CGPoint(x: 120, y: 56.95), controlPoint2: CGPoint(x: 120, y: 58.71))
        bezierPath.addLine(to: CGPoint(x: 120, y: 67.77))
        bezierPath.addCurve(to: CGPoint(x: 119.48, y: 74.64), controlPoint1: CGPoint(x: 120, y: 71.29), controlPoint2: CGPoint(x: 120, y: 73.05))
        bezierPath.addLine(to: CGPoint(x: 119.4, y: 74.95))
        bezierPath.addCurve(to: CGPoint(x: 114.95, y: 79.4), controlPoint1: CGPoint(x: 118.65, y: 77.02), controlPoint2: CGPoint(x: 117.02, y: 78.65))
        bezierPath.addCurve(to: CGPoint(x: 107.77, y: 80), controlPoint1: CGPoint(x: 113.05, y: 80), controlPoint2: CGPoint(x: 111.29, y: 80))
        bezierPath.addLine(to: CGPoint(x: 12.23, y: 80))
        bezierPath.addLine(to: CGPoint(x: 12.07, y: 80))
        bezierPath.addLine(to: CGPoint(x: 11.9, y: 80))
        bezierPath.addLine(to: CGPoint(x: 11.75, y: 80))
        bezierPath.addLine(to: CGPoint(x: 11.59, y: 80))
        bezierPath.addLine(to: CGPoint(x: 11.44, y: 80))
        bezierPath.addLine(to: CGPoint(x: 11.28, y: 80))
        bezierPath.addLine(to: CGPoint(x: 11.13, y: 80))
        bezierPath.addLine(to: CGPoint(x: 10.99, y: 80))
        bezierPath.addLine(to: CGPoint(x: 10.84, y: 80))
        bezierPath.addLine(to: CGPoint(x: 10.7, y: 80))
        bezierPath.addLine(to: CGPoint(x: 10.56, y: 80))
        bezierPath.addLine(to: CGPoint(x: 10.42, y: 80))
        bezierPath.addLine(to: CGPoint(x: 10.29, y: 80))
        bezierPath.addLine(to: CGPoint(x: 10.15, y: 79.99))
        bezierPath.addLine(to: CGPoint(x: 10.02, y: 79.99))
        bezierPath.addLine(to: CGPoint(x: 9.89, y: 79.99))
        bezierPath.addLine(to: CGPoint(x: 9.77, y: 79.99))
        bezierPath.addLine(to: CGPoint(x: 9.64, y: 79.99))
        bezierPath.addLine(to: CGPoint(x: 9.52, y: 79.99))
        bezierPath.addLine(to: CGPoint(x: 9.4, y: 79.98))
        bezierPath.addLine(to: CGPoint(x: 9.28, y: 79.98))
        bezierPath.addLine(to: CGPoint(x: 9.16, y: 79.98))
        bezierPath.addLine(to: CGPoint(x: 9.04, y: 79.98))
        bezierPath.addLine(to: CGPoint(x: 8.93, y: 79.97))
        bezierPath.addLine(to: CGPoint(x: 8.81, y: 79.97))
        bezierPath.addLine(to: CGPoint(x: 8.7, y: 79.96))
        bezierPath.addLine(to: CGPoint(x: 8.59, y: 79.96))
        bezierPath.addLine(to: CGPoint(x: 8.49, y: 79.96))
        bezierPath.addLine(to: CGPoint(x: 8.38, y: 79.95))
        bezierPath.addLine(to: CGPoint(x: 8.27, y: 79.95))
        bezierPath.addLine(to: CGPoint(x: 8.17, y: 79.94))
        bezierPath.addLine(to: CGPoint(x: 8.07, y: 79.93))
        bezierPath.addLine(to: CGPoint(x: 7.97, y: 79.93))
        bezierPath.addLine(to: CGPoint(x: 7.87, y: 79.92))
        bezierPath.addLine(to: CGPoint(x: 7.77, y: 79.91))
        bezierPath.addLine(to: CGPoint(x: 7.68, y: 79.91))
        bezierPath.addLine(to: CGPoint(x: 7.58, y: 79.9))
        bezierPath.addLine(to: CGPoint(x: 7.49, y: 79.89))
        bezierPath.addLine(to: CGPoint(x: 7.39, y: 79.88))
        bezierPath.addLine(to: CGPoint(x: 7.3, y: 79.87))
        bezierPath.addLine(to: CGPoint(x: 7.21, y: 79.86))
        bezierPath.addLine(to: CGPoint(x: 7.12, y: 79.85))
        bezierPath.addLine(to: CGPoint(x: 7.03, y: 79.84))
        bezierPath.addLine(to: CGPoint(x: 6.95, y: 79.83))
        bezierPath.addLine(to: CGPoint(x: 6.86, y: 79.82))
        bezierPath.addLine(to: CGPoint(x: 6.78, y: 79.81))
        bezierPath.addLine(to: CGPoint(x: 6.69, y: 79.79))
        bezierPath.addLine(to: CGPoint(x: 6.61, y: 79.78))
        bezierPath.addLine(to: CGPoint(x: 6.52, y: 79.76))
        bezierPath.addLine(to: CGPoint(x: 6.44, y: 79.75))
        bezierPath.addLine(to: CGPoint(x: 6.36, y: 79.73))
        bezierPath.addLine(to: CGPoint(x: 6.28, y: 79.72))
        bezierPath.addLine(to: CGPoint(x: 6.2, y: 79.7))
        bezierPath.addLine(to: CGPoint(x: 6.12, y: 79.69))
        bezierPath.addLine(to: CGPoint(x: 6.04, y: 79.67))
        bezierPath.addLine(to: CGPoint(x: 5.97, y: 79.65))
        bezierPath.addLine(to: CGPoint(x: 5.89, y: 79.63))
        bezierPath.addLine(to: CGPoint(x: 5.81, y: 79.61))
        bezierPath.addLine(to: CGPoint(x: 5.74, y: 79.59))
        bezierPath.addLine(to: CGPoint(x: 5.66, y: 79.57))
        bezierPath.addLine(to: CGPoint(x: 5.58, y: 79.55))
        bezierPath.addLine(to: CGPoint(x: 5.51, y: 79.52))
        bezierPath.addLine(to: CGPoint(x: 5.43, y: 79.5))
        bezierPath.addLine(to: CGPoint(x: 5.36, y: 79.48))
        bezierPath.addLine(to: CGPoint(x: 5.05, y: 79.4))
        bezierPath.addCurve(to: CGPoint(x: 0.6, y: 74.95), controlPoint1: CGPoint(x: 2.98, y: 78.65), controlPoint2: CGPoint(x: 1.35, y: 77.02))
        bezierPath.addLine(to: CGPoint(x: 0.57, y: 74.86))
        bezierPath.addLine(to: CGPoint(x: 0.54, y: 74.77))
        bezierPath.addLine(to: CGPoint(x: 0.52, y: 74.68))
        bezierPath.addLine(to: CGPoint(x: 0.49, y: 74.59))
        bezierPath.addLine(to: CGPoint(x: 0.47, y: 74.51))
        bezierPath.addLine(to: CGPoint(x: 0.45, y: 74.42))
        bezierPath.addLine(to: CGPoint(x: 0.42, y: 74.33))
        bezierPath.addLine(to: CGPoint(x: 0.4, y: 74.24))
        bezierPath.addLine(to: CGPoint(x: 0.38, y: 74.15))
        bezierPath.addLine(to: CGPoint(x: 0.36, y: 74.06))
        bezierPath.addLine(to: CGPoint(x: 0.34, y: 73.97))
        bezierPath.addLine(to: CGPoint(x: 0.32, y: 73.88))
        bezierPath.addLine(to: CGPoint(x: 0.3, y: 73.79))
        bezierPath.addLine(to: CGPoint(x: 0.29, y: 73.7))
        bezierPath.addLine(to: CGPoint(x: 0.27, y: 73.61))
        bezierPath.addLine(to: CGPoint(x: 0.25, y: 73.52))
        bezierPath.addLine(to: CGPoint(x: 0.24, y: 73.43))
        bezierPath.addLine(to: CGPoint(x: 0.22, y: 73.34))
        bezierPath.addLine(to: CGPoint(x: 0.21, y: 73.25))
        bezierPath.addLine(to: CGPoint(x: 0.19, y: 73.15))
        bezierPath.addLine(to: CGPoint(x: 0.18, y: 73.06))
        bezierPath.addLine(to: CGPoint(x: 0.17, y: 72.96))
        bezierPath.addLine(to: CGPoint(x: 0.16, y: 72.87))
        bezierPath.addLine(to: CGPoint(x: 0.15, y: 72.77))
        bezierPath.addLine(to: CGPoint(x: 0.14, y: 72.68))
        bezierPath.addLine(to: CGPoint(x: 0.13, y: 72.58))
        bezierPath.addLine(to: CGPoint(x: 0.12, y: 72.48))
        bezierPath.addLine(to: CGPoint(x: 0.11, y: 72.38))
        bezierPath.addLine(to: CGPoint(x: 0.1, y: 72.28))
        bezierPath.addLine(to: CGPoint(x: 0.09, y: 72.18))
        bezierPath.addLine(to: CGPoint(x: 0.08, y: 72.07))
        bezierPath.addLine(to: CGPoint(x: 0.07, y: 71.97))
        bezierPath.addLine(to: CGPoint(x: 0.07, y: 71.86))
        bezierPath.addLine(to: CGPoint(x: 0.06, y: 71.76))
        bezierPath.addLine(to: CGPoint(x: 0.06, y: 71.65))
        bezierPath.addLine(to: CGPoint(x: 0.05, y: 71.54))
        bezierPath.addLine(to: CGPoint(x: 0.04, y: 71.43))
        bezierPath.addLine(to: CGPoint(x: 0.04, y: 71.32))
        bezierPath.addLine(to: CGPoint(x: 0.04, y: 71.2))
        bezierPath.addLine(to: CGPoint(x: 0.03, y: 71.09))
        bezierPath.addLine(to: CGPoint(x: 0.03, y: 70.97))
        bezierPath.addLine(to: CGPoint(x: 0.02, y: 70.85))
        bezierPath.addLine(to: CGPoint(x: 0.02, y: 70.74))
        bezierPath.addLine(to: CGPoint(x: 0.02, y: 70.61))
        bezierPath.addLine(to: CGPoint(x: 0.02, y: 70.49))
        bezierPath.addLine(to: CGPoint(x: 0.01, y: 70.37))
        bezierPath.addLine(to: CGPoint(x: 0.01, y: 70.24))
        bezierPath.addLine(to: CGPoint(x: 0.01, y: 70.11))
        bezierPath.addLine(to: CGPoint(x: 0.01, y: 69.98))
        bezierPath.addLine(to: CGPoint(x: 0.01, y: 69.85))
        bezierPath.addLine(to: CGPoint(x: 0.01, y: 69.71))
        bezierPath.addLine(to: CGPoint(x: 0, y: 69.58))
        bezierPath.addLine(to: CGPoint(x: 0, y: 69.44))
        bezierPath.addLine(to: CGPoint(x: 0, y: 69.3))
        bezierPath.addLine(to: CGPoint(x: 0, y: 69.16))
        bezierPath.addLine(to: CGPoint(x: 0, y: 69.01))
        bezierPath.addLine(to: CGPoint(x: 0, y: 68.87))
        bezierPath.addLine(to: CGPoint(x: 0, y: 68.72))
        bezierPath.addLine(to: CGPoint(x: 0, y: 68.56))
        bezierPath.addLine(to: CGPoint(x: 0, y: 68.41))
        bezierPath.addLine(to: CGPoint(x: 0, y: 68.25))
        bezierPath.addLine(to: CGPoint(x: 0, y: 68.1))
        bezierPath.addLine(to: CGPoint(x: 0, y: 67.93))
        bezierPath.addLine(to: CGPoint(x: 0, y: 67.77))
        bezierPath.addLine(to: CGPoint(x: 0, y: 62.23))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 12.23), controlPoint1: CGPoint(x: 0, y: 48.17), controlPoint2: CGPoint(x: 0, y: 12.23))
        bezierPath.addCurve(to: CGPoint(x: 0.52, y: 5.36), controlPoint1: CGPoint(x: 0, y: 8.71), controlPoint2: CGPoint(x: 0, y: 6.95))
        bezierPath.addLine(to: CGPoint(x: 0.6, y: 5.05))
        bezierPath.addCurve(to: CGPoint(x: 5.05, y: 0.6), controlPoint1: CGPoint(x: 1.35, y: 2.98), controlPoint2: CGPoint(x: 2.98, y: 1.35))
        bezierPath.addCurve(to: CGPoint(x: 12.23, y: 0), controlPoint1: CGPoint(x: 6.95, y: 0), controlPoint2: CGPoint(x: 8.71, y: 0))
        bezierPath.addLine(to: CGPoint(x: 17.77, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 24.64, y: 0.52), controlPoint1: CGPoint(x: 21.29, y: 0), controlPoint2: CGPoint(x: 23.05, y: 0))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawRightIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 120, height: 300), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 120, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 120, y: resizedFrame.height / 300)


        //// chevron Drawing
        context.saveGState()
        context.translateBy(x: 29.8, y: 150.57)
        context.rotate(by: -45 * CGFloat.pi/180)

        let chevronPath = UIBezierPath()
        chevronPath.move(to: CGPoint(x: 41.53, y: -56.57))
        chevronPath.addCurve(to: CGPoint(x: 39.31, y: -56.38), controlPoint1: CGPoint(x: 40.5, y: -56.57), controlPoint2: CGPoint(x: 39.88, y: -56.57))
        chevronPath.addCurve(to: CGPoint(x: 37.62, y: -54.78), controlPoint1: CGPoint(x: 38.47, y: -56.09), controlPoint2: CGPoint(x: 37.89, y: -55.51))
        chevronPath.addCurve(to: CGPoint(x: 37.41, y: -52.24), controlPoint1: CGPoint(x: 37.41, y: -54.11), controlPoint2: CGPoint(x: 37.41, y: -53.49))
        chevronPath.addCurve(to: CGPoint(x: 37.41, y: 37.17), controlPoint1: CGPoint(x: 37.41, y: -52.24), controlPoint2: CGPoint(x: 37.41, y: 13.78))
        chevronPath.addLine(to: CGPoint(x: -52.57, y: 37.17))
        chevronPath.addCurve(to: CGPoint(x: -55.02, y: 37.36), controlPoint1: CGPoint(x: -53.82, y: 37.17), controlPoint2: CGPoint(x: -54.45, y: 37.17))
        chevronPath.addCurve(to: CGPoint(x: -56.71, y: 38.96), controlPoint1: CGPoint(x: -55.86, y: 37.65), controlPoint2: CGPoint(x: -56.44, y: 38.23))
        chevronPath.addCurve(to: CGPoint(x: -56.92, y: 41.5), controlPoint1: CGPoint(x: -56.92, y: 39.63), controlPoint2: CGPoint(x: -56.92, y: 40.25))
        chevronPath.addLine(to: CGPoint(x: -56.92, y: 52.24))
        chevronPath.addCurve(to: CGPoint(x: -56.74, y: 54.67), controlPoint1: CGPoint(x: -56.92, y: 53.49), controlPoint2: CGPoint(x: -56.92, y: 54.11))
        chevronPath.addCurve(to: CGPoint(x: -55.12, y: 56.36), controlPoint1: CGPoint(x: -56.44, y: 55.51), controlPoint2: CGPoint(x: -55.86, y: 56.09))
        chevronPath.addCurve(to: CGPoint(x: -52.57, y: 56.57), controlPoint1: CGPoint(x: -54.45, y: 56.57), controlPoint2: CGPoint(x: -53.82, y: 56.57))
        chevronPath.addLine(to: CGPoint(x: 52.57, y: 56.57))
        chevronPath.addCurve(to: CGPoint(x: 55.02, y: 56.38), controlPoint1: CGPoint(x: 53.82, y: 56.57), controlPoint2: CGPoint(x: 54.45, y: 56.57))
        chevronPath.addCurve(to: CGPoint(x: 56.71, y: 54.78), controlPoint1: CGPoint(x: 55.9, y: 56.05), controlPoint2: CGPoint(x: 56.45, y: 55.49))
        chevronPath.addCurve(to: CGPoint(x: 56.86, y: 54.06), controlPoint1: CGPoint(x: 56.78, y: 54.54), controlPoint2: CGPoint(x: 56.83, y: 54.31))
        chevronPath.addCurve(to: CGPoint(x: 56.92, y: 52.79), controlPoint1: CGPoint(x: 56.91, y: 53.71), controlPoint2: CGPoint(x: 56.92, y: 53.31))
        chevronPath.addLine(to: CGPoint(x: 56.92, y: 52.24))
        chevronPath.addLine(to: CGPoint(x: 56.92, y: 49.58))
        chevronPath.addCurve(to: CGPoint(x: 56.74, y: 47.15), controlPoint1: CGPoint(x: 56.92, y: 48.33), controlPoint2: CGPoint(x: 56.92, y: 47.71))
        chevronPath.addCurve(to: CGPoint(x: 56.92, y: -52), controlPoint1: CGPoint(x: 56.92, y: 47.36), controlPoint2: CGPoint(x: 56.92, y: -52))
        chevronPath.addCurve(to: CGPoint(x: 56.74, y: -54.67), controlPoint1: CGPoint(x: 56.92, y: -53.49), controlPoint2: CGPoint(x: 56.92, y: -54.11))
        chevronPath.addCurve(to: CGPoint(x: 55.12, y: -56.36), controlPoint1: CGPoint(x: 56.44, y: -55.51), controlPoint2: CGPoint(x: 55.86, y: -56.09))
        chevronPath.addCurve(to: CGPoint(x: 52.57, y: -56.57), controlPoint1: CGPoint(x: 54.45, y: -56.57), controlPoint2: CGPoint(x: 53.82, y: -56.57))
        chevronPath.addLine(to: CGPoint(x: 41.76, y: -56.57))
        chevronPath.addLine(to: CGPoint(x: 41.53, y: -56.57))
        chevronPath.close()
        iconColor.setFill()
        chevronPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawUpIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 120), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 120)


        //// chevron Drawing
        context.saveGState()
        context.translateBy(x: 150.92, y: 90.71)
        context.rotate(by: 45 * CGFloat.pi/180)

        let chevronPath = UIBezierPath()
        chevronPath.move(to: CGPoint(x: -41.53, y: 56.57))
        chevronPath.addCurve(to: CGPoint(x: -39.31, y: 56.38), controlPoint1: CGPoint(x: -40.5, y: 56.57), controlPoint2: CGPoint(x: -39.88, y: 56.57))
        chevronPath.addCurve(to: CGPoint(x: -37.62, y: 54.78), controlPoint1: CGPoint(x: -38.47, y: 56.09), controlPoint2: CGPoint(x: -37.89, y: 55.51))
        chevronPath.addCurve(to: CGPoint(x: -37.41, y: 52.24), controlPoint1: CGPoint(x: -37.41, y: 54.11), controlPoint2: CGPoint(x: -37.41, y: 53.49))
        chevronPath.addCurve(to: CGPoint(x: -37.41, y: -37.17), controlPoint1: CGPoint(x: -37.41, y: 52.24), controlPoint2: CGPoint(x: -37.41, y: -13.78))
        chevronPath.addLine(to: CGPoint(x: 52.57, y: -37.17))
        chevronPath.addCurve(to: CGPoint(x: 55.02, y: -37.36), controlPoint1: CGPoint(x: 53.82, y: -37.17), controlPoint2: CGPoint(x: 54.45, y: -37.17))
        chevronPath.addCurve(to: CGPoint(x: 56.71, y: -38.96), controlPoint1: CGPoint(x: 55.86, y: -37.65), controlPoint2: CGPoint(x: 56.44, y: -38.23))
        chevronPath.addCurve(to: CGPoint(x: 56.92, y: -41.5), controlPoint1: CGPoint(x: 56.92, y: -39.63), controlPoint2: CGPoint(x: 56.92, y: -40.25))
        chevronPath.addLine(to: CGPoint(x: 56.92, y: -52.24))
        chevronPath.addCurve(to: CGPoint(x: 56.74, y: -54.67), controlPoint1: CGPoint(x: 56.92, y: -53.49), controlPoint2: CGPoint(x: 56.92, y: -54.11))
        chevronPath.addCurve(to: CGPoint(x: 55.12, y: -56.36), controlPoint1: CGPoint(x: 56.44, y: -55.51), controlPoint2: CGPoint(x: 55.86, y: -56.09))
        chevronPath.addCurve(to: CGPoint(x: 52.57, y: -56.57), controlPoint1: CGPoint(x: 54.45, y: -56.57), controlPoint2: CGPoint(x: 53.82, y: -56.57))
        chevronPath.addLine(to: CGPoint(x: -52.57, y: -56.57))
        chevronPath.addCurve(to: CGPoint(x: -55.02, y: -56.38), controlPoint1: CGPoint(x: -53.82, y: -56.57), controlPoint2: CGPoint(x: -54.45, y: -56.57))
        chevronPath.addCurve(to: CGPoint(x: -56.71, y: -54.78), controlPoint1: CGPoint(x: -55.9, y: -56.05), controlPoint2: CGPoint(x: -56.45, y: -55.49))
        chevronPath.addCurve(to: CGPoint(x: -56.86, y: -54.06), controlPoint1: CGPoint(x: -56.78, y: -54.54), controlPoint2: CGPoint(x: -56.83, y: -54.31))
        chevronPath.addCurve(to: CGPoint(x: -56.92, y: -52.79), controlPoint1: CGPoint(x: -56.91, y: -53.71), controlPoint2: CGPoint(x: -56.92, y: -53.31))
        chevronPath.addLine(to: CGPoint(x: -56.92, y: -52.24))
        chevronPath.addLine(to: CGPoint(x: -56.92, y: -49.58))
        chevronPath.addCurve(to: CGPoint(x: -56.74, y: -47.15), controlPoint1: CGPoint(x: -56.92, y: -48.33), controlPoint2: CGPoint(x: -56.92, y: -47.71))
        chevronPath.addCurve(to: CGPoint(x: -56.92, y: 52), controlPoint1: CGPoint(x: -56.92, y: -47.36), controlPoint2: CGPoint(x: -56.92, y: 52))
        chevronPath.addCurve(to: CGPoint(x: -56.74, y: 54.67), controlPoint1: CGPoint(x: -56.92, y: 53.49), controlPoint2: CGPoint(x: -56.92, y: 54.11))
        chevronPath.addCurve(to: CGPoint(x: -55.12, y: 56.36), controlPoint1: CGPoint(x: -56.44, y: 55.51), controlPoint2: CGPoint(x: -55.86, y: 56.09))
        chevronPath.addCurve(to: CGPoint(x: -52.57, y: 56.57), controlPoint1: CGPoint(x: -54.45, y: 56.57), controlPoint2: CGPoint(x: -53.82, y: 56.57))
        chevronPath.addLine(to: CGPoint(x: -41.76, y: 56.57))
        chevronPath.addLine(to: CGPoint(x: -41.53, y: 56.57))
        chevronPath.close()
        iconColor.setFill()
        chevronPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawDarkBackdrop(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1024, height: 1024), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1024, height: 1024), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1024, y: resizedFrame.height / 1024)


        //// bg Drawing
        let bgPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1024, height: 1024))
        StyleKit.darkBackgroundColor.setFill()
        bgPath.fill()


        //// music moon
        //// moon Drawing
        let moonPath = UIBezierPath(ovalIn: CGRect(x: 63.85, y: 64, width: 896, height: 895.7))
        StyleKit.darkTintColor.setFill()
        moonPath.fill()




        //// mountain Drawing
        let mountainPath = UIBezierPath()
        mountainPath.move(to: CGPoint(x: 558.27, y: 550.53))
        mountainPath.addCurve(to: CGPoint(x: 707.02, y: 767.07), controlPoint1: CGPoint(x: 592.27, y: 603.69), controlPoint2: CGPoint(x: 674.6, y: 723.67))
        mountainPath.addCurve(to: CGPoint(x: 767, y: 707), controlPoint1: CGPoint(x: 740.21, y: 733.57), controlPoint2: CGPoint(x: 765.66, y: 708.01))
        mountainPath.addCurve(to: CGPoint(x: 809, y: 689), controlPoint1: CGPoint(x: 771, y: 704), controlPoint2: CGPoint(x: 800, y: 686))
        mountainPath.addCurve(to: CGPoint(x: 928, y: 832.17), controlPoint1: CGPoint(x: 818, y: 692), controlPoint2: CGPoint(x: 922, y: 826.34))
        mountainPath.addCurve(to: CGPoint(x: 1001, y: 864), controlPoint1: CGPoint(x: 934, y: 838), controlPoint2: CGPoint(x: 991, y: 854))
        mountainPath.addCurve(to: CGPoint(x: 1068, y: 972), controlPoint1: CGPoint(x: 1011, y: 874), controlPoint2: CGPoint(x: 1068, y: 972))
        mountainPath.addLine(to: CGPoint(x: 1102, y: 1024))
        mountainPath.addLine(to: CGPoint(x: -77, y: 1024))
        mountainPath.addCurve(to: CGPoint(x: -7, y: 926), controlPoint1: CGPoint(x: -77, y: 1024), controlPoint2: CGPoint(x: -23, y: 940))
        mountainPath.addCurve(to: CGPoint(x: 102, y: 890), controlPoint1: CGPoint(x: 9, y: 912), controlPoint2: CGPoint(x: 96, y: 896))
        mountainPath.addCurve(to: CGPoint(x: 204, y: 776), controlPoint1: CGPoint(x: 108, y: 884), controlPoint2: CGPoint(x: 188, y: 785))
        mountainPath.addCurve(to: CGPoint(x: 286, y: 776), controlPoint1: CGPoint(x: 220, y: 767), controlPoint2: CGPoint(x: 272, y: 783))
        mountainPath.addCurve(to: CGPoint(x: 386, y: 675), controlPoint1: CGPoint(x: 300, y: 769), controlPoint2: CGPoint(x: 386, y: 675))
        mountainPath.addCurve(to: CGPoint(x: 501, y: 514), controlPoint1: CGPoint(x: 386, y: 675), controlPoint2: CGPoint(x: 486, y: 513))
        mountainPath.addCurve(to: CGPoint(x: 558.27, y: 550.53), controlPoint1: CGPoint(x: 516, y: 515), controlPoint2: CGPoint(x: 517, y: 486))
        mountainPath.close()
        UIColor.black.setFill()
        mountainPath.fill()


        //// cloud Drawing
        let cloudPath = UIBezierPath()
        cloudPath.move(to: CGPoint(x: 739.79, y: 1085.31))
        cloudPath.addCurve(to: CGPoint(x: 506.9, y: 1264.86), controlPoint1: CGPoint(x: 703.66, y: 1189.77), controlPoint2: CGPoint(x: 623.6, y: 1264.86))
        cloudPath.addCurve(to: CGPoint(x: 239.28, y: 1127.6), controlPoint1: CGPoint(x: 406.65, y: 1264.86), controlPoint2: CGPoint(x: 284.83, y: 1209.44))
        cloudPath.addCurve(to: CGPoint(x: 97.95, y: 1170.77), controlPoint1: CGPoint(x: 198.92, y: 1154.85), controlPoint2: CGPoint(x: 150.28, y: 1170.77))
        cloudPath.addCurve(to: CGPoint(x: -155, y: 917.9), controlPoint1: CGPoint(x: -41.65, y: 1170.77), controlPoint2: CGPoint(x: -155, y: 1057.46))
        cloudPath.addCurve(to: CGPoint(x: 34.93, y: 682.05), controlPoint1: CGPoint(x: -155, y: 810.53), controlPoint2: CGPoint(x: -59.58, y: 718.7))
        cloudPath.addCurve(to: CGPoint(x: 30.21, y: 629.74), controlPoint1: CGPoint(x: 31.83, y: 665.08), controlPoint2: CGPoint(x: 30.21, y: 647.6))
        cloudPath.addCurve(to: CGPoint(x: 292.08, y: 339.62), controlPoint1: CGPoint(x: 30.21, y: 469.62), controlPoint2: CGPoint(x: 133.41, y: 361.47))
        cloudPath.addCurve(to: CGPoint(x: 584.18, y: 476.7), controlPoint1: CGPoint(x: 416.63, y: 322.46), controlPoint2: CGPoint(x: 532.93, y: 394.43))
        cloudPath.addCurve(to: CGPoint(x: 753.34, y: 386.66), controlPoint1: CGPoint(x: 620.83, y: 422.4), controlPoint2: CGPoint(x: 682.94, y: 386.66))
        cloudPath.addCurve(to: CGPoint(x: 926.91, y: 590.53), controlPoint1: CGPoint(x: 865.9, y: 386.66), controlPoint2: CGPoint(x: 926.91, y: 478.01))
        cloudPath.addLine(to: CGPoint(x: 926.91, y: 591.53))
        cloudPath.addCurve(to: CGPoint(x: 1177.9, y: 864.97), controlPoint1: CGPoint(x: 1067.42, y: 603.47), controlPoint2: CGPoint(x: 1177.9, y: 721.42))
        cloudPath.addCurve(to: CGPoint(x: 903.38, y: 1139.41), controlPoint1: CGPoint(x: 1177.9, y: 1016.44), controlPoint2: CGPoint(x: 1054.89, y: 1139.41))
        cloudPath.addCurve(to: CGPoint(x: 739.79, y: 1085.31), controlPoint1: CGPoint(x: 842.1, y: 1139.41), controlPoint2: CGPoint(x: 785.49, y: 1119.29))
        cloudPath.close()
        cloudPath.usesEvenOddFillRule = true
        StyleKit.darkCloudColor.setFill()
        cloudPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawDisplayBrightnessMinIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 110, y: 110, width: 80, height: 80))
        iconColor.setFill()
        ovalPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawDisplayBrightnessMaxIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 195, y: 150))
        bezier2Path.addCurve(to: CGPoint(x: 150, y: 195), controlPoint1: CGPoint(x: 195, y: 174.85), controlPoint2: CGPoint(x: 174.85, y: 195))
        bezier2Path.addCurve(to: CGPoint(x: 105, y: 150), controlPoint1: CGPoint(x: 125.15, y: 195), controlPoint2: CGPoint(x: 105, y: 174.85))
        bezier2Path.addCurve(to: CGPoint(x: 150, y: 105), controlPoint1: CGPoint(x: 105, y: 125.15), controlPoint2: CGPoint(x: 125.15, y: 105))
        bezier2Path.addCurve(to: CGPoint(x: 195, y: 150), controlPoint1: CGPoint(x: 174.85, y: 105), controlPoint2: CGPoint(x: 195, y: 125.15))
        bezier2Path.addLine(to: CGPoint(x: 185, y: 150))
        bezier2Path.addCurve(to: CGPoint(x: 150, y: 115), controlPoint1: CGPoint(x: 185, y: 130.67), controlPoint2: CGPoint(x: 169.33, y: 115))
        bezier2Path.addCurve(to: CGPoint(x: 115, y: 150), controlPoint1: CGPoint(x: 130.67, y: 115), controlPoint2: CGPoint(x: 115, y: 130.67))
        bezier2Path.addCurve(to: CGPoint(x: 150, y: 185), controlPoint1: CGPoint(x: 115, y: 169.33), controlPoint2: CGPoint(x: 130.67, y: 185))
        bezier2Path.addCurve(to: CGPoint(x: 185, y: 150), controlPoint1: CGPoint(x: 169.33, y: 185), controlPoint2: CGPoint(x: 185, y: 169.33))
        bezier2Path.addLine(to: CGPoint(x: 195, y: 150))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 150, y: 54))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 54))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 54))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 54))
        bezier2Path.addCurve(to: CGPoint(x: 155, y: 59), controlPoint1: CGPoint(x: 152.76, y: 54), controlPoint2: CGPoint(x: 155, y: 56.24))
        bezier2Path.addLine(to: CGPoint(x: 155, y: 59))
        bezier2Path.addLine(to: CGPoint(x: 155, y: 59))
        bezier2Path.addLine(to: CGPoint(x: 155, y: 74))
        bezier2Path.addCurve(to: CGPoint(x: 155, y: 89), controlPoint1: CGPoint(x: 155, y: 89), controlPoint2: CGPoint(x: 155, y: 89))
        bezier2Path.addLine(to: CGPoint(x: 155, y: 89))
        bezier2Path.addCurve(to: CGPoint(x: 150, y: 94), controlPoint1: CGPoint(x: 155, y: 91.76), controlPoint2: CGPoint(x: 152.76, y: 94))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 94))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 94))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 94))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 94))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 94))
        bezier2Path.addCurve(to: CGPoint(x: 145, y: 89), controlPoint1: CGPoint(x: 147.24, y: 94), controlPoint2: CGPoint(x: 145, y: 91.76))
        bezier2Path.addLine(to: CGPoint(x: 145, y: 89))
        bezier2Path.addLine(to: CGPoint(x: 145, y: 89))
        bezier2Path.addLine(to: CGPoint(x: 145, y: 74))
        bezier2Path.addCurve(to: CGPoint(x: 145, y: 59), controlPoint1: CGPoint(x: 145, y: 59), controlPoint2: CGPoint(x: 145, y: 59))
        bezier2Path.addLine(to: CGPoint(x: 145, y: 59))
        bezier2Path.addCurve(to: CGPoint(x: 150, y: 54), controlPoint1: CGPoint(x: 145, y: 56.24), controlPoint2: CGPoint(x: 147.24, y: 54))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 54))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 54))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 217.88, y: 82.12))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 82.12))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 82.12))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 82.12))
        bezier2Path.addCurve(to: CGPoint(x: 217.88, y: 89.19), controlPoint1: CGPoint(x: 219.83, y: 84.07), controlPoint2: CGPoint(x: 219.83, y: 87.24))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 89.19))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 89.19))
        bezier2Path.addLine(to: CGPoint(x: 207.28, y: 99.8))
        bezier2Path.addCurve(to: CGPoint(x: 196.67, y: 110.4), controlPoint1: CGPoint(x: 196.67, y: 110.4), controlPoint2: CGPoint(x: 196.67, y: 110.4))
        bezier2Path.addLine(to: CGPoint(x: 196.67, y: 110.4))
        bezier2Path.addCurve(to: CGPoint(x: 189.6, y: 110.4), controlPoint1: CGPoint(x: 194.72, y: 112.35), controlPoint2: CGPoint(x: 191.55, y: 112.35))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 110.4))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 110.4))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 110.4))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 110.4))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 110.4))
        bezier2Path.addCurve(to: CGPoint(x: 189.6, y: 103.33), controlPoint1: CGPoint(x: 187.65, y: 108.45), controlPoint2: CGPoint(x: 187.65, y: 105.28))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 103.33))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 103.33))
        bezier2Path.addLine(to: CGPoint(x: 200.2, y: 92.72))
        bezier2Path.addCurve(to: CGPoint(x: 210.81, y: 82.12), controlPoint1: CGPoint(x: 210.81, y: 82.12), controlPoint2: CGPoint(x: 210.81, y: 82.12))
        bezier2Path.addLine(to: CGPoint(x: 210.81, y: 82.12))
        bezier2Path.addCurve(to: CGPoint(x: 217.88, y: 82.12), controlPoint1: CGPoint(x: 212.76, y: 80.17), controlPoint2: CGPoint(x: 215.93, y: 80.17))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 82.12))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 82.12))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 82.12, y: 82.12))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 82.12))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 82.12))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 82.12))
        bezier2Path.addCurve(to: CGPoint(x: 89.19, y: 82.12), controlPoint1: CGPoint(x: 84.07, y: 80.17), controlPoint2: CGPoint(x: 87.24, y: 80.17))
        bezier2Path.addLine(to: CGPoint(x: 89.19, y: 82.12))
        bezier2Path.addLine(to: CGPoint(x: 89.19, y: 82.12))
        bezier2Path.addLine(to: CGPoint(x: 99.8, y: 92.72))
        bezier2Path.addCurve(to: CGPoint(x: 110.4, y: 103.33), controlPoint1: CGPoint(x: 110.4, y: 103.33), controlPoint2: CGPoint(x: 110.4, y: 103.33))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 103.33))
        bezier2Path.addCurve(to: CGPoint(x: 110.4, y: 110.4), controlPoint1: CGPoint(x: 112.35, y: 105.28), controlPoint2: CGPoint(x: 112.35, y: 108.45))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 110.4))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 110.4))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 110.4))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 110.4))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 110.4))
        bezier2Path.addCurve(to: CGPoint(x: 103.33, y: 110.4), controlPoint1: CGPoint(x: 108.45, y: 112.35), controlPoint2: CGPoint(x: 105.28, y: 112.35))
        bezier2Path.addLine(to: CGPoint(x: 103.33, y: 110.4))
        bezier2Path.addLine(to: CGPoint(x: 103.33, y: 110.4))
        bezier2Path.addLine(to: CGPoint(x: 92.72, y: 99.8))
        bezier2Path.addCurve(to: CGPoint(x: 82.12, y: 89.19), controlPoint1: CGPoint(x: 82.12, y: 89.19), controlPoint2: CGPoint(x: 82.12, y: 89.19))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 89.19))
        bezier2Path.addCurve(to: CGPoint(x: 82.12, y: 82.12), controlPoint1: CGPoint(x: 80.17, y: 87.24), controlPoint2: CGPoint(x: 80.17, y: 84.07))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 82.12))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 82.12))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 246, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 246, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 246, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 246, y: 150))
        bezier2Path.addCurve(to: CGPoint(x: 241, y: 155), controlPoint1: CGPoint(x: 246, y: 152.76), controlPoint2: CGPoint(x: 243.76, y: 155))
        bezier2Path.addLine(to: CGPoint(x: 241, y: 155))
        bezier2Path.addLine(to: CGPoint(x: 241, y: 155))
        bezier2Path.addLine(to: CGPoint(x: 226, y: 155))
        bezier2Path.addCurve(to: CGPoint(x: 211, y: 155), controlPoint1: CGPoint(x: 211, y: 155), controlPoint2: CGPoint(x: 211, y: 155))
        bezier2Path.addLine(to: CGPoint(x: 211, y: 155))
        bezier2Path.addCurve(to: CGPoint(x: 206, y: 150), controlPoint1: CGPoint(x: 208.24, y: 155), controlPoint2: CGPoint(x: 206, y: 152.76))
        bezier2Path.addLine(to: CGPoint(x: 206, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 206, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 206, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 206, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 206, y: 150))
        bezier2Path.addCurve(to: CGPoint(x: 211, y: 145), controlPoint1: CGPoint(x: 206, y: 147.24), controlPoint2: CGPoint(x: 208.24, y: 145))
        bezier2Path.addLine(to: CGPoint(x: 211, y: 145))
        bezier2Path.addLine(to: CGPoint(x: 211, y: 145))
        bezier2Path.addLine(to: CGPoint(x: 226, y: 145))
        bezier2Path.addCurve(to: CGPoint(x: 241, y: 145), controlPoint1: CGPoint(x: 241, y: 145), controlPoint2: CGPoint(x: 241, y: 145))
        bezier2Path.addLine(to: CGPoint(x: 241, y: 145))
        bezier2Path.addCurve(to: CGPoint(x: 246, y: 150), controlPoint1: CGPoint(x: 243.76, y: 145), controlPoint2: CGPoint(x: 246, y: 147.24))
        bezier2Path.addLine(to: CGPoint(x: 246, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 246, y: 150))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 217.88, y: 217.88))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 217.88))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 217.88))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 217.88))
        bezier2Path.addCurve(to: CGPoint(x: 210.81, y: 217.88), controlPoint1: CGPoint(x: 215.93, y: 219.83), controlPoint2: CGPoint(x: 212.76, y: 219.83))
        bezier2Path.addLine(to: CGPoint(x: 210.81, y: 217.88))
        bezier2Path.addLine(to: CGPoint(x: 210.81, y: 217.88))
        bezier2Path.addLine(to: CGPoint(x: 200.2, y: 207.28))
        bezier2Path.addCurve(to: CGPoint(x: 189.6, y: 196.67), controlPoint1: CGPoint(x: 189.6, y: 196.67), controlPoint2: CGPoint(x: 189.6, y: 196.67))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 196.67))
        bezier2Path.addCurve(to: CGPoint(x: 189.6, y: 189.6), controlPoint1: CGPoint(x: 187.65, y: 194.72), controlPoint2: CGPoint(x: 187.65, y: 191.55))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 189.6))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 189.6))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 189.6))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 189.6))
        bezier2Path.addLine(to: CGPoint(x: 189.6, y: 189.6))
        bezier2Path.addCurve(to: CGPoint(x: 196.67, y: 189.6), controlPoint1: CGPoint(x: 191.55, y: 187.65), controlPoint2: CGPoint(x: 194.72, y: 187.65))
        bezier2Path.addLine(to: CGPoint(x: 196.67, y: 189.6))
        bezier2Path.addLine(to: CGPoint(x: 196.67, y: 189.6))
        bezier2Path.addLine(to: CGPoint(x: 207.28, y: 200.2))
        bezier2Path.addCurve(to: CGPoint(x: 217.88, y: 210.81), controlPoint1: CGPoint(x: 217.88, y: 210.81), controlPoint2: CGPoint(x: 217.88, y: 210.81))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 210.81))
        bezier2Path.addCurve(to: CGPoint(x: 217.88, y: 217.88), controlPoint1: CGPoint(x: 219.83, y: 212.76), controlPoint2: CGPoint(x: 219.83, y: 215.93))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 217.88))
        bezier2Path.addLine(to: CGPoint(x: 217.88, y: 217.88))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 54, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 54, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 54, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 54, y: 150))
        bezier2Path.addCurve(to: CGPoint(x: 59, y: 145), controlPoint1: CGPoint(x: 54, y: 147.24), controlPoint2: CGPoint(x: 56.24, y: 145))
        bezier2Path.addLine(to: CGPoint(x: 59, y: 145))
        bezier2Path.addLine(to: CGPoint(x: 59, y: 145))
        bezier2Path.addLine(to: CGPoint(x: 74, y: 145))
        bezier2Path.addCurve(to: CGPoint(x: 89, y: 145), controlPoint1: CGPoint(x: 89, y: 145), controlPoint2: CGPoint(x: 89, y: 145))
        bezier2Path.addLine(to: CGPoint(x: 89, y: 145))
        bezier2Path.addCurve(to: CGPoint(x: 94, y: 150), controlPoint1: CGPoint(x: 91.76, y: 145), controlPoint2: CGPoint(x: 94, y: 147.24))
        bezier2Path.addLine(to: CGPoint(x: 94, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 94, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 94, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 94, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 94, y: 150))
        bezier2Path.addCurve(to: CGPoint(x: 89, y: 155), controlPoint1: CGPoint(x: 94, y: 152.76), controlPoint2: CGPoint(x: 91.76, y: 155))
        bezier2Path.addLine(to: CGPoint(x: 89, y: 155))
        bezier2Path.addLine(to: CGPoint(x: 89, y: 155))
        bezier2Path.addLine(to: CGPoint(x: 74, y: 155))
        bezier2Path.addCurve(to: CGPoint(x: 59, y: 155), controlPoint1: CGPoint(x: 59, y: 155), controlPoint2: CGPoint(x: 59, y: 155))
        bezier2Path.addLine(to: CGPoint(x: 59, y: 155))
        bezier2Path.addCurve(to: CGPoint(x: 54, y: 150), controlPoint1: CGPoint(x: 56.24, y: 155), controlPoint2: CGPoint(x: 54, y: 152.76))
        bezier2Path.addLine(to: CGPoint(x: 54, y: 150))
        bezier2Path.addLine(to: CGPoint(x: 54, y: 150))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 82.12, y: 217.88))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 217.88))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 217.88))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 217.88))
        bezier2Path.addCurve(to: CGPoint(x: 82.12, y: 210.81), controlPoint1: CGPoint(x: 80.17, y: 215.93), controlPoint2: CGPoint(x: 80.17, y: 212.76))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 210.81))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 210.81))
        bezier2Path.addLine(to: CGPoint(x: 92.72, y: 200.2))
        bezier2Path.addCurve(to: CGPoint(x: 103.33, y: 189.6), controlPoint1: CGPoint(x: 103.33, y: 189.6), controlPoint2: CGPoint(x: 103.33, y: 189.6))
        bezier2Path.addLine(to: CGPoint(x: 103.33, y: 189.6))
        bezier2Path.addCurve(to: CGPoint(x: 110.4, y: 189.6), controlPoint1: CGPoint(x: 105.28, y: 187.65), controlPoint2: CGPoint(x: 108.45, y: 187.65))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 189.6))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 189.6))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 189.6))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 189.6))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 189.6))
        bezier2Path.addCurve(to: CGPoint(x: 110.4, y: 196.67), controlPoint1: CGPoint(x: 112.35, y: 191.55), controlPoint2: CGPoint(x: 112.35, y: 194.72))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 196.67))
        bezier2Path.addLine(to: CGPoint(x: 110.4, y: 196.67))
        bezier2Path.addLine(to: CGPoint(x: 99.8, y: 207.28))
        bezier2Path.addCurve(to: CGPoint(x: 89.19, y: 217.88), controlPoint1: CGPoint(x: 89.19, y: 217.88), controlPoint2: CGPoint(x: 89.19, y: 217.88))
        bezier2Path.addLine(to: CGPoint(x: 89.19, y: 217.88))
        bezier2Path.addCurve(to: CGPoint(x: 82.12, y: 217.88), controlPoint1: CGPoint(x: 87.24, y: 219.83), controlPoint2: CGPoint(x: 84.07, y: 219.83))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 217.88))
        bezier2Path.addLine(to: CGPoint(x: 82.12, y: 217.88))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 150, y: 246))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 246))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 246))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 246))
        bezier2Path.addCurve(to: CGPoint(x: 145, y: 241), controlPoint1: CGPoint(x: 147.24, y: 246), controlPoint2: CGPoint(x: 145, y: 243.76))
        bezier2Path.addLine(to: CGPoint(x: 145, y: 241))
        bezier2Path.addLine(to: CGPoint(x: 145, y: 241))
        bezier2Path.addLine(to: CGPoint(x: 145, y: 226))
        bezier2Path.addCurve(to: CGPoint(x: 145, y: 211), controlPoint1: CGPoint(x: 145, y: 211), controlPoint2: CGPoint(x: 145, y: 211))
        bezier2Path.addLine(to: CGPoint(x: 145, y: 211))
        bezier2Path.addCurve(to: CGPoint(x: 150, y: 206), controlPoint1: CGPoint(x: 145, y: 208.24), controlPoint2: CGPoint(x: 147.24, y: 206))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 206))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 206))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 206))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 206))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 206))
        bezier2Path.addCurve(to: CGPoint(x: 155, y: 211), controlPoint1: CGPoint(x: 152.76, y: 206), controlPoint2: CGPoint(x: 155, y: 208.24))
        bezier2Path.addLine(to: CGPoint(x: 155, y: 211))
        bezier2Path.addLine(to: CGPoint(x: 155, y: 211))
        bezier2Path.addLine(to: CGPoint(x: 155, y: 226))
        bezier2Path.addCurve(to: CGPoint(x: 155, y: 241), controlPoint1: CGPoint(x: 155, y: 241), controlPoint2: CGPoint(x: 155, y: 241))
        bezier2Path.addLine(to: CGPoint(x: 155, y: 241))
        bezier2Path.addCurve(to: CGPoint(x: 150, y: 246), controlPoint1: CGPoint(x: 155, y: 243.76), controlPoint2: CGPoint(x: 152.76, y: 246))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 246))
        bezier2Path.addLine(to: CGPoint(x: 150, y: 246))
        bezier2Path.close()
        iconColor.setFill()
        bezier2Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 110, y: 110, width: 80, height: 80))
        iconColor.setFill()
        ovalPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCloseIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 150, y: 150)
        context.rotate(by: -45 * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9.98, y: -71.61))
        bezierPath.addLine(to: CGPoint(x: 10.21, y: -71.55))
        bezierPath.addCurve(to: CGPoint(x: 13.55, y: -68.21), controlPoint1: CGPoint(x: 11.76, y: -70.99), controlPoint2: CGPoint(x: 12.99, y: -69.76))
        bezierPath.addCurve(to: CGPoint(x: 14, y: -62.83), controlPoint1: CGPoint(x: 14, y: -66.79), controlPoint2: CGPoint(x: 14, y: -65.47))
        bezierPath.addCurve(to: CGPoint(x: 14, y: -14), controlPoint1: CGPoint(x: 14, y: -62.83), controlPoint2: CGPoint(x: 14, y: -40.11))
        bezierPath.addLine(to: CGPoint(x: 62.83, y: -14))
        bezierPath.addCurve(to: CGPoint(x: 67.98, y: -13.61), controlPoint1: CGPoint(x: 65.47, y: -14), controlPoint2: CGPoint(x: 66.79, y: -14))
        bezierPath.addLine(to: CGPoint(x: 68.21, y: -13.55))
        bezierPath.addCurve(to: CGPoint(x: 71.55, y: -10.21), controlPoint1: CGPoint(x: 69.76, y: -12.99), controlPoint2: CGPoint(x: 70.99, y: -11.76))
        bezierPath.addCurve(to: CGPoint(x: 72, y: -4.83), controlPoint1: CGPoint(x: 72, y: -8.79), controlPoint2: CGPoint(x: 72, y: -7.47))
        bezierPath.addLine(to: CGPoint(x: 72, y: 3.83))
        bezierPath.addCurve(to: CGPoint(x: 71.61, y: 8.98), controlPoint1: CGPoint(x: 72, y: 6.47), controlPoint2: CGPoint(x: 72, y: 7.79))
        bezierPath.addLine(to: CGPoint(x: 71.55, y: 9.21))
        bezierPath.addCurve(to: CGPoint(x: 68.21, y: 12.55), controlPoint1: CGPoint(x: 70.99, y: 10.76), controlPoint2: CGPoint(x: 69.76, y: 11.99))
        bezierPath.addCurve(to: CGPoint(x: 62.83, y: 13), controlPoint1: CGPoint(x: 66.79, y: 13), controlPoint2: CGPoint(x: 65.47, y: 13))
        bezierPath.addLine(to: CGPoint(x: 14, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 62.83), controlPoint1: CGPoint(x: 14, y: 39.53), controlPoint2: CGPoint(x: 14, y: 62.83))
        bezierPath.addCurve(to: CGPoint(x: 13.61, y: 67.98), controlPoint1: CGPoint(x: 14, y: 65.47), controlPoint2: CGPoint(x: 14, y: 66.79))
        bezierPath.addLine(to: CGPoint(x: 13.55, y: 68.21))
        bezierPath.addCurve(to: CGPoint(x: 10.21, y: 71.55), controlPoint1: CGPoint(x: 12.99, y: 69.76), controlPoint2: CGPoint(x: 11.76, y: 70.99))
        bezierPath.addCurve(to: CGPoint(x: 4.83, y: 72), controlPoint1: CGPoint(x: 8.79, y: 72), controlPoint2: CGPoint(x: 7.47, y: 72))
        bezierPath.addLine(to: CGPoint(x: -3.83, y: 72))
        bezierPath.addCurve(to: CGPoint(x: -8.98, y: 71.61), controlPoint1: CGPoint(x: -6.47, y: 72), controlPoint2: CGPoint(x: -7.79, y: 72))
        bezierPath.addLine(to: CGPoint(x: -9.21, y: 71.55))
        bezierPath.addCurve(to: CGPoint(x: -12.55, y: 68.21), controlPoint1: CGPoint(x: -10.76, y: 70.99), controlPoint2: CGPoint(x: -11.99, y: 69.76))
        bezierPath.addCurve(to: CGPoint(x: -13, y: 62.83), controlPoint1: CGPoint(x: -13, y: 66.79), controlPoint2: CGPoint(x: -13, y: 65.47))
        bezierPath.addCurve(to: CGPoint(x: -13, y: 13), controlPoint1: CGPoint(x: -13, y: 62.83), controlPoint2: CGPoint(x: -13, y: 39.53))
        bezierPath.addLine(to: CGPoint(x: -62.83, y: 13))
        bezierPath.addCurve(to: CGPoint(x: -67.98, y: 12.61), controlPoint1: CGPoint(x: -65.47, y: 13), controlPoint2: CGPoint(x: -66.79, y: 13))
        bezierPath.addLine(to: CGPoint(x: -68.21, y: 12.55))
        bezierPath.addCurve(to: CGPoint(x: -71.55, y: 9.21), controlPoint1: CGPoint(x: -69.76, y: 11.99), controlPoint2: CGPoint(x: -70.99, y: 10.76))
        bezierPath.addCurve(to: CGPoint(x: -72, y: 3.83), controlPoint1: CGPoint(x: -72, y: 7.79), controlPoint2: CGPoint(x: -72, y: 6.47))
        bezierPath.addLine(to: CGPoint(x: -72, y: -4.83))
        bezierPath.addCurve(to: CGPoint(x: -71.61, y: -9.98), controlPoint1: CGPoint(x: -72, y: -7.47), controlPoint2: CGPoint(x: -72, y: -8.79))
        bezierPath.addLine(to: CGPoint(x: -71.55, y: -10.21))
        bezierPath.addCurve(to: CGPoint(x: -68.21, y: -13.55), controlPoint1: CGPoint(x: -70.99, y: -11.76), controlPoint2: CGPoint(x: -69.76, y: -12.99))
        bezierPath.addCurve(to: CGPoint(x: -62.83, y: -14), controlPoint1: CGPoint(x: -66.79, y: -14), controlPoint2: CGPoint(x: -65.47, y: -14))
        bezierPath.addLine(to: CGPoint(x: -13, y: -14))
        bezierPath.addCurve(to: CGPoint(x: -13, y: -62.83), controlPoint1: CGPoint(x: -13, y: -40.11), controlPoint2: CGPoint(x: -13, y: -62.83))
        bezierPath.addCurve(to: CGPoint(x: -12.61, y: -67.98), controlPoint1: CGPoint(x: -13, y: -65.47), controlPoint2: CGPoint(x: -13, y: -66.79))
        bezierPath.addLine(to: CGPoint(x: -12.55, y: -68.21))
        bezierPath.addCurve(to: CGPoint(x: -9.21, y: -71.55), controlPoint1: CGPoint(x: -11.99, y: -69.76), controlPoint2: CGPoint(x: -10.76, y: -70.99))
        bezierPath.addCurve(to: CGPoint(x: -3.83, y: -72), controlPoint1: CGPoint(x: -7.79, y: -72), controlPoint2: CGPoint(x: -6.47, y: -72))
        bezierPath.addLine(to: CGPoint(x: 4.83, y: -72))
        bezierPath.addCurve(to: CGPoint(x: 9.98, y: -71.61), controlPoint1: CGPoint(x: 7.47, y: -72), controlPoint2: CGPoint(x: 8.79, y: -72))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawSortIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 172, y: 170.03))
        bezier3Path.addLine(to: CGPoint(x: 172, y: 73))
        bezier3Path.addCurve(to: CGPoint(x: 175.01, y: 70), controlPoint1: CGPoint(x: 172, y: 71.35), controlPoint2: CGPoint(x: 173.35, y: 70))
        bezier3Path.addLine(to: CGPoint(x: 193.31, y: 70))
        bezier3Path.addCurve(to: CGPoint(x: 196.32, y: 73), controlPoint1: CGPoint(x: 194.98, y: 70), controlPoint2: CGPoint(x: 196.32, y: 71.35))
        bezier3Path.addLine(to: CGPoint(x: 196.32, y: 170.03))
        bezier3Path.addCurve(to: CGPoint(x: 214.92, y: 170), controlPoint1: CGPoint(x: 203.77, y: 170.01), controlPoint2: CGPoint(x: 212.27, y: 170))
        bezier3Path.addCurve(to: CGPoint(x: 214.92, y: 178.6), controlPoint1: CGPoint(x: 218.78, y: 170), controlPoint2: CGPoint(x: 219.9, y: 173.71))
        bezier3Path.addCurve(to: CGPoint(x: 187.03, y: 211.36), controlPoint1: CGPoint(x: 209.95, y: 183.49), controlPoint2: CGPoint(x: 187.03, y: 211.36))
        bezier3Path.addCurve(to: CGPoint(x: 180.06, y: 211.36), controlPoint1: CGPoint(x: 185.11, y: 213.28), controlPoint2: CGPoint(x: 181.98, y: 213.28))
        bezier3Path.addCurve(to: CGPoint(x: 152.17, y: 178.6), controlPoint1: CGPoint(x: 180.06, y: 211.36), controlPoint2: CGPoint(x: 156.26, y: 182.78))
        bezier3Path.addCurve(to: CGPoint(x: 152.17, y: 170), controlPoint1: CGPoint(x: 148.08, y: 174.42), controlPoint2: CGPoint(x: 147.82, y: 170.05))
        bezier3Path.addLine(to: CGPoint(x: 172, y: 170.03))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 103, y: 130.77))
        bezier3Path.addLine(to: CGPoint(x: 103, y: 227.8))
        bezier3Path.addCurve(to: CGPoint(x: 106.01, y: 230.8), controlPoint1: CGPoint(x: 103, y: 229.45), controlPoint2: CGPoint(x: 104.35, y: 230.8))
        bezier3Path.addLine(to: CGPoint(x: 124.31, y: 230.8))
        bezier3Path.addCurve(to: CGPoint(x: 127.32, y: 227.8), controlPoint1: CGPoint(x: 125.98, y: 230.8), controlPoint2: CGPoint(x: 127.32, y: 229.46))
        bezier3Path.addLine(to: CGPoint(x: 127.32, y: 130.78))
        bezier3Path.addCurve(to: CGPoint(x: 145.92, y: 130.8), controlPoint1: CGPoint(x: 134.77, y: 130.79), controlPoint2: CGPoint(x: 143.27, y: 130.8))
        bezier3Path.addCurve(to: CGPoint(x: 145.92, y: 122.2), controlPoint1: CGPoint(x: 149.78, y: 130.8), controlPoint2: CGPoint(x: 150.9, y: 127.09))
        bezier3Path.addCurve(to: CGPoint(x: 118.03, y: 89.44), controlPoint1: CGPoint(x: 140.95, y: 117.31), controlPoint2: CGPoint(x: 118.03, y: 89.44))
        bezier3Path.addCurve(to: CGPoint(x: 111.06, y: 89.44), controlPoint1: CGPoint(x: 116.11, y: 87.52), controlPoint2: CGPoint(x: 112.98, y: 87.52))
        bezier3Path.addCurve(to: CGPoint(x: 83.17, y: 122.2), controlPoint1: CGPoint(x: 111.06, y: 89.44), controlPoint2: CGPoint(x: 87.26, y: 118.02))
        bezier3Path.addCurve(to: CGPoint(x: 83.17, y: 130.8), controlPoint1: CGPoint(x: 79.08, y: 126.38), controlPoint2: CGPoint(x: 78.82, y: 130.75))
        bezier3Path.addLine(to: CGPoint(x: 103, y: 130.77))
        bezier3Path.close()
        iconColor.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawMoreIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, iconColor: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 95.5, y: 167))
        bezierPath.addCurve(to: CGPoint(x: 78, y: 149.5), controlPoint1: CGPoint(x: 85.84, y: 167), controlPoint2: CGPoint(x: 78, y: 159.16))
        bezierPath.addCurve(to: CGPoint(x: 95.5, y: 132), controlPoint1: CGPoint(x: 78, y: 139.84), controlPoint2: CGPoint(x: 85.84, y: 132))
        bezierPath.addCurve(to: CGPoint(x: 113, y: 149.5), controlPoint1: CGPoint(x: 105.17, y: 132), controlPoint2: CGPoint(x: 113, y: 139.84))
        bezierPath.addCurve(to: CGPoint(x: 95.5, y: 167), controlPoint1: CGPoint(x: 113, y: 159.16), controlPoint2: CGPoint(x: 105.17, y: 167))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 150.5, y: 167))
        bezierPath.addCurve(to: CGPoint(x: 133, y: 149.5), controlPoint1: CGPoint(x: 140.84, y: 167), controlPoint2: CGPoint(x: 133, y: 159.16))
        bezierPath.addCurve(to: CGPoint(x: 150.5, y: 132), controlPoint1: CGPoint(x: 133, y: 139.84), controlPoint2: CGPoint(x: 140.84, y: 132))
        bezierPath.addCurve(to: CGPoint(x: 168, y: 149.5), controlPoint1: CGPoint(x: 160.16, y: 132), controlPoint2: CGPoint(x: 168, y: 139.84))
        bezierPath.addCurve(to: CGPoint(x: 150.5, y: 167), controlPoint1: CGPoint(x: 168, y: 159.16), controlPoint2: CGPoint(x: 160.16, y: 167))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 205.5, y: 167))
        bezierPath.addCurve(to: CGPoint(x: 188, y: 149.5), controlPoint1: CGPoint(x: 195.84, y: 167), controlPoint2: CGPoint(x: 188, y: 159.16))
        bezierPath.addCurve(to: CGPoint(x: 205.5, y: 132), controlPoint1: CGPoint(x: 188, y: 139.84), controlPoint2: CGPoint(x: 195.84, y: 132))
        bezierPath.addCurve(to: CGPoint(x: 223, y: 149.5), controlPoint1: CGPoint(x: 215.16, y: 132), controlPoint2: CGPoint(x: 223, y: 139.84))
        bezierPath.addCurve(to: CGPoint(x: 205.5, y: 167), controlPoint1: CGPoint(x: 223, y: 159.16), controlPoint2: CGPoint(x: 215.16, y: 167))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        iconColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawImportIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class var imageOfLightPlaceholderReleaseArtwork: UIImage {
        if Cache.imageOfLightPlaceholderReleaseArtwork != nil {
            return Cache.imageOfLightPlaceholderReleaseArtwork!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 300), false, 0)
            StyleKit.drawLightPlaceholderReleaseArtwork()

        Cache.imageOfLightPlaceholderReleaseArtwork = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfLightPlaceholderReleaseArtwork!
    }

    public dynamic class var imageOfDarkPlaceholderReleaseArtwork: UIImage {
        if Cache.imageOfDarkPlaceholderReleaseArtwork != nil {
            return Cache.imageOfDarkPlaceholderReleaseArtwork!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 300), false, 0)
            StyleKit.drawDarkPlaceholderReleaseArtwork()

        Cache.imageOfDarkPlaceholderReleaseArtwork = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDarkPlaceholderReleaseArtwork!
    }

    public dynamic class var imageOfLightPlaceholderArtistArtwork: UIImage {
        if Cache.imageOfLightPlaceholderArtistArtwork != nil {
            return Cache.imageOfLightPlaceholderArtistArtwork!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 300), false, 0)
            StyleKit.drawLightPlaceholderArtistArtwork()

        Cache.imageOfLightPlaceholderArtistArtwork = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfLightPlaceholderArtistArtwork!
    }

    public dynamic class var imageOfDarkPlaceholderArtistArtwork: UIImage {
        if Cache.imageOfDarkPlaceholderArtistArtwork != nil {
            return Cache.imageOfDarkPlaceholderArtistArtwork!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 300), false, 0)
            StyleKit.drawDarkPlaceholderArtistArtwork()

        Cache.imageOfDarkPlaceholderArtistArtwork = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDarkPlaceholderArtistArtwork!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var lightPlaceholderReleaseArtworkTargets: [AnyObject]! {
        get { return Cache.lightPlaceholderReleaseArtworkTargets }
        set {
            Cache.lightPlaceholderReleaseArtworkTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfLightPlaceholderReleaseArtwork)
            }
        }
    }

    @IBOutlet dynamic var darkPlaceholderReleaseArtworkTargets: [AnyObject]! {
        get { return Cache.darkPlaceholderReleaseArtworkTargets }
        set {
            Cache.darkPlaceholderReleaseArtworkTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfDarkPlaceholderReleaseArtwork)
            }
        }
    }

    @IBOutlet dynamic var lightPlaceholderArtistArtworkTargets: [AnyObject]! {
        get { return Cache.lightPlaceholderArtistArtworkTargets }
        set {
            Cache.lightPlaceholderArtistArtworkTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfLightPlaceholderArtistArtwork)
            }
        }
    }

    @IBOutlet dynamic var darkPlaceholderArtistArtworkTargets: [AnyObject]! {
        get { return Cache.darkPlaceholderArtistArtworkTargets }
        set {
            Cache.darkPlaceholderArtistArtworkTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfDarkPlaceholderArtistArtwork)
            }
        }
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
